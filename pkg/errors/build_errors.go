// Package errors contains errors for the domain "neb".
//
// This file is automatically generated by errawr-gen. Do not modify it.
package errors

import (
	errawr "github.com/puppetlabs/errawr-go/v2/pkg/errawr"
	impl "github.com/puppetlabs/errawr-go/v2/pkg/impl"
)

// Error is the type of all errors generated by this package.
type Error interface {
	errawr.Error
}

// External contains methods that can be used externally to help consume errors from this package.
type External struct{}

// API is a singleton instance of the External type.
var API External

// Domain is the general domain in which all errors in this package belong.
var Domain = &impl.ErrorDomain{
	Key:   "neb",
	Title: "Nebula",
}

// ClientSection defines a section of errors with the following scope:
// Client errors
var ClientSection = &impl.ErrorSection{
	Key:   "client",
	Title: "Client errors",
}

// ClientCreateSessionErrorCode is the code for an instance of "create_session_error".
const ClientCreateSessionErrorCode = "neb_client_create_session_error"

// IsClientCreateSessionError tests whether a given error is an instance of "create_session_error".
func IsClientCreateSessionError(err errawr.Error) bool {
	return err != nil && err.Is(ClientCreateSessionErrorCode)
}

// IsClientCreateSessionError tests whether a given error is an instance of "create_session_error".
func (External) IsClientCreateSessionError(err errawr.Error) bool {
	return IsClientCreateSessionError(err)
}

// ClientCreateSessionErrorBuilder is a builder for "create_session_error" errors.
type ClientCreateSessionErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "create_session_error" from this builder.
func (b *ClientCreateSessionErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching your API token",
		Technical: "there was an error fetching your API token",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "create_session_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Create session error",
		Version:          1,
	}
}

// NewClientCreateSessionErrorBuilder creates a new error builder for the code "create_session_error".
func NewClientCreateSessionErrorBuilder() *ClientCreateSessionErrorBuilder {
	return &ClientCreateSessionErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientCreateSessionError creates a new error with the code "create_session_error".
func NewClientCreateSessionError() Error {
	return NewClientCreateSessionErrorBuilder().Build()
}

// ClientCreateWorkflowErrorCode is the code for an instance of "create_workflow_error".
const ClientCreateWorkflowErrorCode = "neb_client_create_workflow_error"

// IsClientCreateWorkflowError tests whether a given error is an instance of "create_workflow_error".
func IsClientCreateWorkflowError(err errawr.Error) bool {
	return err != nil && err.Is(ClientCreateWorkflowErrorCode)
}

// IsClientCreateWorkflowError tests whether a given error is an instance of "create_workflow_error".
func (External) IsClientCreateWorkflowError(err errawr.Error) bool {
	return IsClientCreateWorkflowError(err)
}

// ClientCreateWorkflowErrorBuilder is a builder for "create_workflow_error" errors.
type ClientCreateWorkflowErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "create_workflow_error" from this builder.
func (b *ClientCreateWorkflowErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error creating the workflow",
		Technical: "there was an error creating the workflow",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "create_workflow_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Create workflow error",
		Version:          1,
	}
}

// NewClientCreateWorkflowErrorBuilder creates a new error builder for the code "create_workflow_error".
func NewClientCreateWorkflowErrorBuilder() *ClientCreateWorkflowErrorBuilder {
	return &ClientCreateWorkflowErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientCreateWorkflowError creates a new error with the code "create_workflow_error".
func NewClientCreateWorkflowError() Error {
	return NewClientCreateWorkflowErrorBuilder().Build()
}

// ClientCreateWorkflowSecretErrorCode is the code for an instance of "create_workflow_secret_error".
const ClientCreateWorkflowSecretErrorCode = "neb_client_create_workflow_secret_error"

// IsClientCreateWorkflowSecretError tests whether a given error is an instance of "create_workflow_secret_error".
func IsClientCreateWorkflowSecretError(err errawr.Error) bool {
	return err != nil && err.Is(ClientCreateWorkflowSecretErrorCode)
}

// IsClientCreateWorkflowSecretError tests whether a given error is an instance of "create_workflow_secret_error".
func (External) IsClientCreateWorkflowSecretError(err errawr.Error) bool {
	return IsClientCreateWorkflowSecretError(err)
}

// ClientCreateWorkflowSecretErrorBuilder is a builder for "create_workflow_secret_error" errors.
type ClientCreateWorkflowSecretErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "create_workflow_secret_error" from this builder.
func (b *ClientCreateWorkflowSecretErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error creating the workflow secret",
		Technical: "there was an error creating the workflow secret",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "create_workflow_secret_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Create workflow secret error",
		Version:          1,
	}
}

// NewClientCreateWorkflowSecretErrorBuilder creates a new error builder for the code "create_workflow_secret_error".
func NewClientCreateWorkflowSecretErrorBuilder() *ClientCreateWorkflowSecretErrorBuilder {
	return &ClientCreateWorkflowSecretErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientCreateWorkflowSecretError creates a new error with the code "create_workflow_secret_error".
func NewClientCreateWorkflowSecretError() Error {
	return NewClientCreateWorkflowSecretErrorBuilder().Build()
}

// ClientGetIntegrationErrorCode is the code for an instance of "get_integration_error".
const ClientGetIntegrationErrorCode = "neb_client_get_integration_error"

// IsClientGetIntegrationError tests whether a given error is an instance of "get_integration_error".
func IsClientGetIntegrationError(err errawr.Error) bool {
	return err != nil && err.Is(ClientGetIntegrationErrorCode)
}

// IsClientGetIntegrationError tests whether a given error is an instance of "get_integration_error".
func (External) IsClientGetIntegrationError(err errawr.Error) bool {
	return IsClientGetIntegrationError(err)
}

// ClientGetIntegrationErrorBuilder is a builder for "get_integration_error" errors.
type ClientGetIntegrationErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "get_integration_error" from this builder.
func (b *ClientGetIntegrationErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching integration {{id}}",
		Technical: "there was an error fetching integration {{id}}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "get_integration_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Get integration error",
		Version:          1,
	}
}

// NewClientGetIntegrationErrorBuilder creates a new error builder for the code "get_integration_error".
func NewClientGetIntegrationErrorBuilder(id string) *ClientGetIntegrationErrorBuilder {
	return &ClientGetIntegrationErrorBuilder{arguments: impl.ErrorArguments{"id": impl.NewErrorArgument(id, "the id of the integration")}}
}

// NewClientGetIntegrationError creates a new error with the code "get_integration_error".
func NewClientGetIntegrationError(id string) Error {
	return NewClientGetIntegrationErrorBuilder(id).Build()
}

// ClientGetWorkflowRevisionErrorCode is the code for an instance of "get_workflow_revision_error".
const ClientGetWorkflowRevisionErrorCode = "neb_client_get_workflow_revision_error"

// IsClientGetWorkflowRevisionError tests whether a given error is an instance of "get_workflow_revision_error".
func IsClientGetWorkflowRevisionError(err errawr.Error) bool {
	return err != nil && err.Is(ClientGetWorkflowRevisionErrorCode)
}

// IsClientGetWorkflowRevisionError tests whether a given error is an instance of "get_workflow_revision_error".
func (External) IsClientGetWorkflowRevisionError(err errawr.Error) bool {
	return IsClientGetWorkflowRevisionError(err)
}

// ClientGetWorkflowRevisionErrorBuilder is a builder for "get_workflow_revision_error" errors.
type ClientGetWorkflowRevisionErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "get_workflow_revision_error" from this builder.
func (b *ClientGetWorkflowRevisionErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching this workflow revision",
		Technical: "there was an error fetching this workflow revision",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "get_workflow_revision_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Get workflow revision error",
		Version:          1,
	}
}

// NewClientGetWorkflowRevisionErrorBuilder creates a new error builder for the code "get_workflow_revision_error".
func NewClientGetWorkflowRevisionErrorBuilder() *ClientGetWorkflowRevisionErrorBuilder {
	return &ClientGetWorkflowRevisionErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientGetWorkflowRevisionError creates a new error with the code "get_workflow_revision_error".
func NewClientGetWorkflowRevisionError() Error {
	return NewClientGetWorkflowRevisionErrorBuilder().Build()
}

// ClientGetWorkflowRunErrorCode is the code for an instance of "get_workflow_run_error".
const ClientGetWorkflowRunErrorCode = "neb_client_get_workflow_run_error"

// IsClientGetWorkflowRunError tests whether a given error is an instance of "get_workflow_run_error".
func IsClientGetWorkflowRunError(err errawr.Error) bool {
	return err != nil && err.Is(ClientGetWorkflowRunErrorCode)
}

// IsClientGetWorkflowRunError tests whether a given error is an instance of "get_workflow_run_error".
func (External) IsClientGetWorkflowRunError(err errawr.Error) bool {
	return IsClientGetWorkflowRunError(err)
}

// ClientGetWorkflowRunErrorBuilder is a builder for "get_workflow_run_error" errors.
type ClientGetWorkflowRunErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "get_workflow_run_error" from this builder.
func (b *ClientGetWorkflowRunErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching this workflow run",
		Technical: "there was an error fetching this workflow run",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "get_workflow_run_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Get workflow run error",
		Version:          1,
	}
}

// NewClientGetWorkflowRunErrorBuilder creates a new error builder for the code "get_workflow_run_error".
func NewClientGetWorkflowRunErrorBuilder() *ClientGetWorkflowRunErrorBuilder {
	return &ClientGetWorkflowRunErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientGetWorkflowRunError creates a new error with the code "get_workflow_run_error".
func NewClientGetWorkflowRunError() Error {
	return NewClientGetWorkflowRunErrorBuilder().Build()
}

// ClientGetWorkflowRunStepLogErrorCode is the code for an instance of "get_workflow_run_step_log_error".
const ClientGetWorkflowRunStepLogErrorCode = "neb_client_get_workflow_run_step_log_error"

// IsClientGetWorkflowRunStepLogError tests whether a given error is an instance of "get_workflow_run_step_log_error".
func IsClientGetWorkflowRunStepLogError(err errawr.Error) bool {
	return err != nil && err.Is(ClientGetWorkflowRunStepLogErrorCode)
}

// IsClientGetWorkflowRunStepLogError tests whether a given error is an instance of "get_workflow_run_step_log_error".
func (External) IsClientGetWorkflowRunStepLogError(err errawr.Error) bool {
	return IsClientGetWorkflowRunStepLogError(err)
}

// ClientGetWorkflowRunStepLogErrorBuilder is a builder for "get_workflow_run_step_log_error" errors.
type ClientGetWorkflowRunStepLogErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "get_workflow_run_step_log_error" from this builder.
func (b *ClientGetWorkflowRunStepLogErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching this workflow run step log",
		Technical: "there was an error fetching this workflow run step log",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "get_workflow_run_step_log_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Get workflow run step log error",
		Version:          1,
	}
}

// NewClientGetWorkflowRunStepLogErrorBuilder creates a new error builder for the code "get_workflow_run_step_log_error".
func NewClientGetWorkflowRunStepLogErrorBuilder() *ClientGetWorkflowRunStepLogErrorBuilder {
	return &ClientGetWorkflowRunStepLogErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientGetWorkflowRunStepLogError creates a new error with the code "get_workflow_run_step_log_error".
func NewClientGetWorkflowRunStepLogError() Error {
	return NewClientGetWorkflowRunStepLogErrorBuilder().Build()
}

// ClientInvalidAPIHostCode is the code for an instance of "invalid_api_host".
const ClientInvalidAPIHostCode = "neb_client_invalid_api_host"

// IsClientInvalidAPIHost tests whether a given error is an instance of "invalid_api_host".
func IsClientInvalidAPIHost(err errawr.Error) bool {
	return err != nil && err.Is(ClientInvalidAPIHostCode)
}

// IsClientInvalidAPIHost tests whether a given error is an instance of "invalid_api_host".
func (External) IsClientInvalidAPIHost(err errawr.Error) bool {
	return IsClientInvalidAPIHost(err)
}

// ClientInvalidAPIHostBuilder is a builder for "invalid_api_host" errors.
type ClientInvalidAPIHostBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_api_host" from this builder.
func (b *ClientInvalidAPIHostBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "{{ host }} is not a valid api url",
		Technical: "{{ host }} is not a valid api url",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_api_host",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid API host",
		Version:          1,
	}
}

// NewClientInvalidAPIHostBuilder creates a new error builder for the code "invalid_api_host".
func NewClientInvalidAPIHostBuilder(host string) *ClientInvalidAPIHostBuilder {
	return &ClientInvalidAPIHostBuilder{arguments: impl.ErrorArguments{"host": impl.NewErrorArgument(host, "the host url given that was not valid")}}
}

// NewClientInvalidAPIHost creates a new error with the code "invalid_api_host".
func NewClientInvalidAPIHost(host string) Error {
	return NewClientInvalidAPIHostBuilder(host).Build()
}

// ClientListIntegrationsErrorCode is the code for an instance of "list_integrations_error".
const ClientListIntegrationsErrorCode = "neb_client_list_integrations_error"

// IsClientListIntegrationsError tests whether a given error is an instance of "list_integrations_error".
func IsClientListIntegrationsError(err errawr.Error) bool {
	return err != nil && err.Is(ClientListIntegrationsErrorCode)
}

// IsClientListIntegrationsError tests whether a given error is an instance of "list_integrations_error".
func (External) IsClientListIntegrationsError(err errawr.Error) bool {
	return IsClientListIntegrationsError(err)
}

// ClientListIntegrationsErrorBuilder is a builder for "list_integrations_error" errors.
type ClientListIntegrationsErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "list_integrations_error" from this builder.
func (b *ClientListIntegrationsErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching integrations",
		Technical: "there was an error fetching integrations",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "list_integrations_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "List integrations error",
		Version:          1,
	}
}

// NewClientListIntegrationsErrorBuilder creates a new error builder for the code "list_integrations_error".
func NewClientListIntegrationsErrorBuilder() *ClientListIntegrationsErrorBuilder {
	return &ClientListIntegrationsErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientListIntegrationsError creates a new error with the code "list_integrations_error".
func NewClientListIntegrationsError() Error {
	return NewClientListIntegrationsErrorBuilder().Build()
}

// ClientListWorkflowRunsErrorCode is the code for an instance of "list_workflow_runs_error".
const ClientListWorkflowRunsErrorCode = "neb_client_list_workflow_runs_error"

// IsClientListWorkflowRunsError tests whether a given error is an instance of "list_workflow_runs_error".
func IsClientListWorkflowRunsError(err errawr.Error) bool {
	return err != nil && err.Is(ClientListWorkflowRunsErrorCode)
}

// IsClientListWorkflowRunsError tests whether a given error is an instance of "list_workflow_runs_error".
func (External) IsClientListWorkflowRunsError(err errawr.Error) bool {
	return IsClientListWorkflowRunsError(err)
}

// ClientListWorkflowRunsErrorBuilder is a builder for "list_workflow_runs_error" errors.
type ClientListWorkflowRunsErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "list_workflow_runs_error" from this builder.
func (b *ClientListWorkflowRunsErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching workflow runs",
		Technical: "there was an error fetching workflow runs",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "list_workflow_runs_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "List workflow runs error",
		Version:          1,
	}
}

// NewClientListWorkflowRunsErrorBuilder creates a new error builder for the code "list_workflow_runs_error".
func NewClientListWorkflowRunsErrorBuilder() *ClientListWorkflowRunsErrorBuilder {
	return &ClientListWorkflowRunsErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientListWorkflowRunsError creates a new error with the code "list_workflow_runs_error".
func NewClientListWorkflowRunsError() Error {
	return NewClientListWorkflowRunsErrorBuilder().Build()
}

// ClientListWorkflowsErrorCode is the code for an instance of "list_workflows_error".
const ClientListWorkflowsErrorCode = "neb_client_list_workflows_error"

// IsClientListWorkflowsError tests whether a given error is an instance of "list_workflows_error".
func IsClientListWorkflowsError(err errawr.Error) bool {
	return err != nil && err.Is(ClientListWorkflowsErrorCode)
}

// IsClientListWorkflowsError tests whether a given error is an instance of "list_workflows_error".
func (External) IsClientListWorkflowsError(err errawr.Error) bool {
	return IsClientListWorkflowsError(err)
}

// ClientListWorkflowsErrorBuilder is a builder for "list_workflows_error" errors.
type ClientListWorkflowsErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "list_workflows_error" from this builder.
func (b *ClientListWorkflowsErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching workflows",
		Technical: "there was an error fetching workflows",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "list_workflows_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "List workflows error",
		Version:          1,
	}
}

// NewClientListWorkflowsErrorBuilder creates a new error builder for the code "list_workflows_error".
func NewClientListWorkflowsErrorBuilder() *ClientListWorkflowsErrorBuilder {
	return &ClientListWorkflowsErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientListWorkflowsError creates a new error with the code "list_workflows_error".
func NewClientListWorkflowsError() Error {
	return NewClientListWorkflowsErrorBuilder().Build()
}

// ClientMissingEmailErrorCode is the code for an instance of "missing_email_error".
const ClientMissingEmailErrorCode = "neb_client_missing_email_error"

// IsClientMissingEmailError tests whether a given error is an instance of "missing_email_error".
func IsClientMissingEmailError(err errawr.Error) bool {
	return err != nil && err.Is(ClientMissingEmailErrorCode)
}

// IsClientMissingEmailError tests whether a given error is an instance of "missing_email_error".
func (External) IsClientMissingEmailError(err errawr.Error) bool {
	return IsClientMissingEmailError(err)
}

// ClientMissingEmailErrorBuilder is a builder for "missing_email_error" errors.
type ClientMissingEmailErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "missing_email_error" from this builder.
func (b *ClientMissingEmailErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "{{ msg }}",
		Technical: "{{ msg }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "missing_email_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Missing email error",
		Version:          1,
	}
}

// NewClientMissingEmailErrorBuilder creates a new error builder for the code "missing_email_error".
func NewClientMissingEmailErrorBuilder(msg string) *ClientMissingEmailErrorBuilder {
	return &ClientMissingEmailErrorBuilder{arguments: impl.ErrorArguments{"msg": impl.NewErrorArgument(msg, "a message about what the issue was")}}
}

// NewClientMissingEmailError creates a new error with the code "missing_email_error".
func NewClientMissingEmailError(msg string) Error {
	return NewClientMissingEmailErrorBuilder(msg).Build()
}

// ClientNotLoggedInCode is the code for an instance of "not_logged_in".
const ClientNotLoggedInCode = "neb_client_not_logged_in"

// IsClientNotLoggedIn tests whether a given error is an instance of "not_logged_in".
func IsClientNotLoggedIn(err errawr.Error) bool {
	return err != nil && err.Is(ClientNotLoggedInCode)
}

// IsClientNotLoggedIn tests whether a given error is an instance of "not_logged_in".
func (External) IsClientNotLoggedIn(err errawr.Error) bool {
	return IsClientNotLoggedIn(err)
}

// ClientNotLoggedInBuilder is a builder for "not_logged_in" errors.
type ClientNotLoggedInBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "not_logged_in" from this builder.
func (b *ClientNotLoggedInBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "not logged in",
		Technical: "not logged in",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "not_logged_in",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Not logged in",
		Version:          1,
	}
}

// NewClientNotLoggedInBuilder creates a new error builder for the code "not_logged_in".
func NewClientNotLoggedInBuilder() *ClientNotLoggedInBuilder {
	return &ClientNotLoggedInBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientNotLoggedIn creates a new error with the code "not_logged_in".
func NewClientNotLoggedIn() Error {
	return NewClientNotLoggedInBuilder().Build()
}

// ClientPasswordErrorCode is the code for an instance of "password_error".
const ClientPasswordErrorCode = "neb_client_password_error"

// IsClientPasswordError tests whether a given error is an instance of "password_error".
func IsClientPasswordError(err errawr.Error) bool {
	return err != nil && err.Is(ClientPasswordErrorCode)
}

// IsClientPasswordError tests whether a given error is an instance of "password_error".
func (External) IsClientPasswordError(err errawr.Error) bool {
	return IsClientPasswordError(err)
}

// ClientPasswordErrorBuilder is a builder for "password_error" errors.
type ClientPasswordErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "password_error" from this builder.
func (b *ClientPasswordErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "{{ msg }}",
		Technical: "{{ msg }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "password_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Password error",
		Version:          1,
	}
}

// NewClientPasswordErrorBuilder creates a new error builder for the code "password_error".
func NewClientPasswordErrorBuilder(msg string) *ClientPasswordErrorBuilder {
	return &ClientPasswordErrorBuilder{arguments: impl.ErrorArguments{"msg": impl.NewErrorArgument(msg, "a message about what the issue was")}}
}

// NewClientPasswordError creates a new error with the code "password_error".
func NewClientPasswordError(msg string) Error {
	return NewClientPasswordErrorBuilder(msg).Build()
}

// ClientRunWorkflowErrorCode is the code for an instance of "run_workflow_error".
const ClientRunWorkflowErrorCode = "neb_client_run_workflow_error"

// IsClientRunWorkflowError tests whether a given error is an instance of "run_workflow_error".
func IsClientRunWorkflowError(err errawr.Error) bool {
	return err != nil && err.Is(ClientRunWorkflowErrorCode)
}

// IsClientRunWorkflowError tests whether a given error is an instance of "run_workflow_error".
func (External) IsClientRunWorkflowError(err errawr.Error) bool {
	return IsClientRunWorkflowError(err)
}

// ClientRunWorkflowErrorBuilder is a builder for "run_workflow_error" errors.
type ClientRunWorkflowErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "run_workflow_error" from this builder.
func (b *ClientRunWorkflowErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error running the workflow",
		Technical: "there was an error running the workflow",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "run_workflow_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Run workflow error",
		Version:          1,
	}
}

// NewClientRunWorkflowErrorBuilder creates a new error builder for the code "run_workflow_error".
func NewClientRunWorkflowErrorBuilder() *ClientRunWorkflowErrorBuilder {
	return &ClientRunWorkflowErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientRunWorkflowError creates a new error with the code "run_workflow_error".
func NewClientRunWorkflowError() Error {
	return NewClientRunWorkflowErrorBuilder().Build()
}

// ClientTokenLoadErrorCode is the code for an instance of "token_load_error".
const ClientTokenLoadErrorCode = "neb_client_token_load_error"

// IsClientTokenLoadError tests whether a given error is an instance of "token_load_error".
func IsClientTokenLoadError(err errawr.Error) bool {
	return err != nil && err.Is(ClientTokenLoadErrorCode)
}

// IsClientTokenLoadError tests whether a given error is an instance of "token_load_error".
func (External) IsClientTokenLoadError(err errawr.Error) bool {
	return IsClientTokenLoadError(err)
}

// ClientTokenLoadErrorBuilder is a builder for "token_load_error" errors.
type ClientTokenLoadErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "token_load_error" from this builder.
func (b *ClientTokenLoadErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error loading the auth token",
		Technical: "there was an error loading the auth token",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "token_load_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Token load error",
		Version:          1,
	}
}

// NewClientTokenLoadErrorBuilder creates a new error builder for the code "token_load_error".
func NewClientTokenLoadErrorBuilder() *ClientTokenLoadErrorBuilder {
	return &ClientTokenLoadErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientTokenLoadError creates a new error with the code "token_load_error".
func NewClientTokenLoadError() Error {
	return NewClientTokenLoadErrorBuilder().Build()
}

// ClientTokenStorageErrorCode is the code for an instance of "token_storage_error".
const ClientTokenStorageErrorCode = "neb_client_token_storage_error"

// IsClientTokenStorageError tests whether a given error is an instance of "token_storage_error".
func IsClientTokenStorageError(err errawr.Error) bool {
	return err != nil && err.Is(ClientTokenStorageErrorCode)
}

// IsClientTokenStorageError tests whether a given error is an instance of "token_storage_error".
func (External) IsClientTokenStorageError(err errawr.Error) bool {
	return IsClientTokenStorageError(err)
}

// ClientTokenStorageErrorBuilder is a builder for "token_storage_error" errors.
type ClientTokenStorageErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "token_storage_error" from this builder.
func (b *ClientTokenStorageErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error storing the auth token",
		Technical: "there was an error storing the auth token",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "token_storage_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Token storage error",
		Version:          1,
	}
}

// NewClientTokenStorageErrorBuilder creates a new error builder for the code "token_storage_error".
func NewClientTokenStorageErrorBuilder() *ClientTokenStorageErrorBuilder {
	return &ClientTokenStorageErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientTokenStorageError creates a new error with the code "token_storage_error".
func NewClientTokenStorageError() Error {
	return NewClientTokenStorageErrorBuilder().Build()
}

// ClientUnexpectedResponseTypeErrorCode is the code for an instance of "unexpected_response_type_error".
const ClientUnexpectedResponseTypeErrorCode = "neb_client_unexpected_response_type_error"

// IsClientUnexpectedResponseTypeError tests whether a given error is an instance of "unexpected_response_type_error".
func IsClientUnexpectedResponseTypeError(err errawr.Error) bool {
	return err != nil && err.Is(ClientUnexpectedResponseTypeErrorCode)
}

// IsClientUnexpectedResponseTypeError tests whether a given error is an instance of "unexpected_response_type_error".
func (External) IsClientUnexpectedResponseTypeError(err errawr.Error) bool {
	return IsClientUnexpectedResponseTypeError(err)
}

// ClientUnexpectedResponseTypeErrorBuilder is a builder for "unexpected_response_type_error" errors.
type ClientUnexpectedResponseTypeErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "unexpected_response_type_error" from this builder.
func (b *ClientUnexpectedResponseTypeErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "An unexpected response type was returned for this request.",
		Technical: "An unexpected response type was returned for this request.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "unexpected_response_type_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Unexpected response type",
		Version:          1,
	}
}

// NewClientUnexpectedResponseTypeErrorBuilder creates a new error builder for the code "unexpected_response_type_error".
func NewClientUnexpectedResponseTypeErrorBuilder() *ClientUnexpectedResponseTypeErrorBuilder {
	return &ClientUnexpectedResponseTypeErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientUnexpectedResponseTypeError creates a new error with the code "unexpected_response_type_error".
func NewClientUnexpectedResponseTypeError() Error {
	return NewClientUnexpectedResponseTypeErrorBuilder().Build()
}

// ClientUpdateWorkflowSecretErrorCode is the code for an instance of "update_workflow_secret_error".
const ClientUpdateWorkflowSecretErrorCode = "neb_client_update_workflow_secret_error"

// IsClientUpdateWorkflowSecretError tests whether a given error is an instance of "update_workflow_secret_error".
func IsClientUpdateWorkflowSecretError(err errawr.Error) bool {
	return err != nil && err.Is(ClientUpdateWorkflowSecretErrorCode)
}

// IsClientUpdateWorkflowSecretError tests whether a given error is an instance of "update_workflow_secret_error".
func (External) IsClientUpdateWorkflowSecretError(err errawr.Error) bool {
	return IsClientUpdateWorkflowSecretError(err)
}

// ClientUpdateWorkflowSecretErrorBuilder is a builder for "update_workflow_secret_error" errors.
type ClientUpdateWorkflowSecretErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "update_workflow_secret_error" from this builder.
func (b *ClientUpdateWorkflowSecretErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error updating the workflow secret",
		Technical: "there was an error updating the workflow secret",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "update_workflow_secret_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Update workflow secret error",
		Version:          1,
	}
}

// NewClientUpdateWorkflowSecretErrorBuilder creates a new error builder for the code "update_workflow_secret_error".
func NewClientUpdateWorkflowSecretErrorBuilder() *ClientUpdateWorkflowSecretErrorBuilder {
	return &ClientUpdateWorkflowSecretErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientUpdateWorkflowSecretError creates a new error with the code "update_workflow_secret_error".
func NewClientUpdateWorkflowSecretError() Error {
	return NewClientUpdateWorkflowSecretErrorBuilder().Build()
}

// ClientValidateWorkflowErrorCode is the code for an instance of "validate_workflow_error".
const ClientValidateWorkflowErrorCode = "neb_client_validate_workflow_error"

// IsClientValidateWorkflowError tests whether a given error is an instance of "validate_workflow_error".
func IsClientValidateWorkflowError(err errawr.Error) bool {
	return err != nil && err.Is(ClientValidateWorkflowErrorCode)
}

// IsClientValidateWorkflowError tests whether a given error is an instance of "validate_workflow_error".
func (External) IsClientValidateWorkflowError(err errawr.Error) bool {
	return IsClientValidateWorkflowError(err)
}

// ClientValidateWorkflowErrorBuilder is a builder for "validate_workflow_error" errors.
type ClientValidateWorkflowErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "validate_workflow_error" from this builder.
func (b *ClientValidateWorkflowErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error validating the workflow",
		Technical: "there was an error validating the workflow",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "validate_workflow_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Validate workflow error",
		Version:          1,
	}
}

// NewClientValidateWorkflowErrorBuilder creates a new error builder for the code "validate_workflow_error".
func NewClientValidateWorkflowErrorBuilder() *ClientValidateWorkflowErrorBuilder {
	return &ClientValidateWorkflowErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientValidateWorkflowError creates a new error with the code "validate_workflow_error".
func NewClientValidateWorkflowError() Error {
	return NewClientValidateWorkflowErrorBuilder().Build()
}

// ClientWorkflowSecretAlreadyExistsErrorCode is the code for an instance of "workflow_secret_already_exists_error".
const ClientWorkflowSecretAlreadyExistsErrorCode = "neb_client_workflow_secret_already_exists_error"

// IsClientWorkflowSecretAlreadyExistsError tests whether a given error is an instance of "workflow_secret_already_exists_error".
func IsClientWorkflowSecretAlreadyExistsError(err errawr.Error) bool {
	return err != nil && err.Is(ClientWorkflowSecretAlreadyExistsErrorCode)
}

// IsClientWorkflowSecretAlreadyExistsError tests whether a given error is an instance of "workflow_secret_already_exists_error".
func (External) IsClientWorkflowSecretAlreadyExistsError(err errawr.Error) bool {
	return IsClientWorkflowSecretAlreadyExistsError(err)
}

// ClientWorkflowSecretAlreadyExistsErrorBuilder is a builder for "workflow_secret_already_exists_error" errors.
type ClientWorkflowSecretAlreadyExistsErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "workflow_secret_already_exists_error" from this builder.
func (b *ClientWorkflowSecretAlreadyExistsErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The workflow secret identified by {{pre key}} already exists.",
		Technical: "The workflow secret identified by {{pre key}} already exists.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "workflow_secret_already_exists_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Workflow secret already exists",
		Version:          1,
	}
}

// NewClientWorkflowSecretAlreadyExistsErrorBuilder creates a new error builder for the code "workflow_secret_already_exists_error".
func NewClientWorkflowSecretAlreadyExistsErrorBuilder(key string) *ClientWorkflowSecretAlreadyExistsErrorBuilder {
	return &ClientWorkflowSecretAlreadyExistsErrorBuilder{arguments: impl.ErrorArguments{"key": impl.NewErrorArgument(key, "the key of the secret")}}
}

// NewClientWorkflowSecretAlreadyExistsError creates a new error with the code "workflow_secret_already_exists_error".
func NewClientWorkflowSecretAlreadyExistsError(key string) Error {
	return NewClientWorkflowSecretAlreadyExistsErrorBuilder(key).Build()
}

// WorkflowSection defines a section of errors with the following scope:
// Workflow errors
var WorkflowSection = &impl.ErrorSection{
	Key:   "workflow",
	Title: "Workflow errors",
}

// WorkflowCliFlagErrorCode is the code for an instance of "cli_flag_error".
const WorkflowCliFlagErrorCode = "neb_workflow_cli_flag_error"

// IsWorkflowCliFlagError tests whether a given error is an instance of "cli_flag_error".
func IsWorkflowCliFlagError(err errawr.Error) bool {
	return err != nil && err.Is(WorkflowCliFlagErrorCode)
}

// IsWorkflowCliFlagError tests whether a given error is an instance of "cli_flag_error".
func (External) IsWorkflowCliFlagError(err errawr.Error) bool {
	return IsWorkflowCliFlagError(err)
}

// WorkflowCliFlagErrorBuilder is a builder for "cli_flag_error" errors.
type WorkflowCliFlagErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "cli_flag_error" from this builder.
func (b *WorkflowCliFlagErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "could not validate flag {{ flag }}: {{ msg }}",
		Technical: "could not validate flag {{ flag }}: {{ msg }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "cli_flag_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "CLI flag error",
		Version:          1,
	}
}

// NewWorkflowCliFlagErrorBuilder creates a new error builder for the code "cli_flag_error".
func NewWorkflowCliFlagErrorBuilder(flag string, msg string) *WorkflowCliFlagErrorBuilder {
	return &WorkflowCliFlagErrorBuilder{arguments: impl.ErrorArguments{
		"flag": impl.NewErrorArgument(flag, "the name of the flag"),
		"msg":  impl.NewErrorArgument(msg, "a message about what went wrong"),
	}}
}

// NewWorkflowCliFlagError creates a new error with the code "cli_flag_error".
func NewWorkflowCliFlagError(flag string, msg string) Error {
	return NewWorkflowCliFlagErrorBuilder(flag, msg).Build()
}

// WorkflowSecretValueNotSpecifiedErrorCode is the code for an instance of "secret_value_not_specified_error".
const WorkflowSecretValueNotSpecifiedErrorCode = "neb_workflow_secret_value_not_specified_error"

// IsWorkflowSecretValueNotSpecifiedError tests whether a given error is an instance of "secret_value_not_specified_error".
func IsWorkflowSecretValueNotSpecifiedError(err errawr.Error) bool {
	return err != nil && err.Is(WorkflowSecretValueNotSpecifiedErrorCode)
}

// IsWorkflowSecretValueNotSpecifiedError tests whether a given error is an instance of "secret_value_not_specified_error".
func (External) IsWorkflowSecretValueNotSpecifiedError(err errawr.Error) bool {
	return IsWorkflowSecretValueNotSpecifiedError(err)
}

// WorkflowSecretValueNotSpecifiedErrorBuilder is a builder for "secret_value_not_specified_error" errors.
type WorkflowSecretValueNotSpecifiedErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "secret_value_not_specified_error" from this builder.
func (b *WorkflowSecretValueNotSpecifiedErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "You did not provide a secret value.",
		Technical: "You did not provide a secret value.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "secret_value_not_specified_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Secret value not specified",
		Version:          1,
	}
}

// NewWorkflowSecretValueNotSpecifiedErrorBuilder creates a new error builder for the code "secret_value_not_specified_error".
func NewWorkflowSecretValueNotSpecifiedErrorBuilder() *WorkflowSecretValueNotSpecifiedErrorBuilder {
	return &WorkflowSecretValueNotSpecifiedErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewWorkflowSecretValueNotSpecifiedError creates a new error with the code "secret_value_not_specified_error".
func NewWorkflowSecretValueNotSpecifiedError() Error {
	return NewWorkflowSecretValueNotSpecifiedErrorBuilder().Build()
}

// WorkflowUnknownRuntimeErrorCode is the code for an instance of "unknown_runtime_error".
const WorkflowUnknownRuntimeErrorCode = "neb_workflow_unknown_runtime_error"

// IsWorkflowUnknownRuntimeError tests whether a given error is an instance of "unknown_runtime_error".
func IsWorkflowUnknownRuntimeError(err errawr.Error) bool {
	return err != nil && err.Is(WorkflowUnknownRuntimeErrorCode)
}

// IsWorkflowUnknownRuntimeError tests whether a given error is an instance of "unknown_runtime_error".
func (External) IsWorkflowUnknownRuntimeError(err errawr.Error) bool {
	return IsWorkflowUnknownRuntimeError(err)
}

// WorkflowUnknownRuntimeErrorBuilder is a builder for "unknown_runtime_error" errors.
type WorkflowUnknownRuntimeErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "unknown_runtime_error" from this builder.
func (b *WorkflowUnknownRuntimeErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "an unknown error occurred",
		Technical: "an unknown error occurred",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "unknown_runtime_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Unknown runtime error",
		Version:          1,
	}
}

// NewWorkflowUnknownRuntimeErrorBuilder creates a new error builder for the code "unknown_runtime_error".
func NewWorkflowUnknownRuntimeErrorBuilder() *WorkflowUnknownRuntimeErrorBuilder {
	return &WorkflowUnknownRuntimeErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewWorkflowUnknownRuntimeError creates a new error with the code "unknown_runtime_error".
func NewWorkflowUnknownRuntimeError() Error {
	return NewWorkflowUnknownRuntimeErrorBuilder().Build()
}
