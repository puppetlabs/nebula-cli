// Code generated by go-swagger; DO NOT EDIT.

package workflow_triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// GetWorkflowTriggersReader is a Reader for the GetWorkflowTriggers structure.
type GetWorkflowTriggersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkflowTriggersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkflowTriggersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetWorkflowTriggersDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetWorkflowTriggersOK creates a GetWorkflowTriggersOK with default headers values
func NewGetWorkflowTriggersOK() *GetWorkflowTriggersOK {
	return &GetWorkflowTriggersOK{}
}

/*GetWorkflowTriggersOK handles this case with default header values.

A list of workflow triggers
*/
type GetWorkflowTriggersOK struct {
	Payload *GetWorkflowTriggersOKBody
}

func (o *GetWorkflowTriggersOK) Error() string {
	return fmt.Sprintf("[GET /api/workflows/{workflowName}/triggers][%d] getWorkflowTriggersOK  %+v", 200, o.Payload)
}

func (o *GetWorkflowTriggersOK) GetPayload() *GetWorkflowTriggersOKBody {
	return o.Payload
}

func (o *GetWorkflowTriggersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWorkflowTriggersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowTriggersDefault creates a GetWorkflowTriggersDefault with default headers values
func NewGetWorkflowTriggersDefault(code int) *GetWorkflowTriggersDefault {
	return &GetWorkflowTriggersDefault{
		_statusCode: code,
	}
}

/*GetWorkflowTriggersDefault handles this case with default header values.

An error occurred
*/
type GetWorkflowTriggersDefault struct {
	_statusCode int

	Payload *GetWorkflowTriggersDefaultBody
}

// Code gets the status code for the get workflow triggers default response
func (o *GetWorkflowTriggersDefault) Code() int {
	return o._statusCode
}

func (o *GetWorkflowTriggersDefault) Error() string {
	return fmt.Sprintf("[GET /api/workflows/{workflowName}/triggers][%d] getWorkflowTriggers default  %+v", o._statusCode, o.Payload)
}

func (o *GetWorkflowTriggersDefault) GetPayload() *GetWorkflowTriggersDefaultBody {
	return o.Payload
}

func (o *GetWorkflowTriggersDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWorkflowTriggersDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetWorkflowTriggersDefaultBody Error response
swagger:model GetWorkflowTriggersDefaultBody
*/
type GetWorkflowTriggersDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this get workflow triggers default body
func (o *GetWorkflowTriggersDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWorkflowTriggersDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWorkflowTriggers default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowTriggersDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowTriggersDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetWorkflowTriggersDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetWorkflowTriggersOKBody The response type for retrieving the triggers in a workflow
swagger:model GetWorkflowTriggersOKBody
*/
type GetWorkflowTriggersOKBody struct {

	// A list of triggers
	Triggers []*models.WorkflowTrigger `json:"triggers"`
}

// Validate validates this get workflow triggers o k body
func (o *GetWorkflowTriggersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTriggers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWorkflowTriggersOKBody) validateTriggers(formats strfmt.Registry) error {

	if swag.IsZero(o.Triggers) { // not required
		return nil
	}

	for i := 0; i < len(o.Triggers); i++ {
		if swag.IsZero(o.Triggers[i]) { // not required
			continue
		}

		if o.Triggers[i] != nil {
			if err := o.Triggers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getWorkflowTriggersOK" + "." + "triggers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowTriggersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowTriggersOKBody) UnmarshalBinary(b []byte) error {
	var res GetWorkflowTriggersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
