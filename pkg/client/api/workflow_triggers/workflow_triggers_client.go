// Code generated by go-swagger; DO NOT EDIT.

package workflow_triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new workflow triggers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflow triggers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateWorkflowTrigger creates a new workflow trigger
*/
func (a *Client) CreateWorkflowTrigger(params *CreateWorkflowTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateWorkflowTriggerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWorkflowTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWorkflowTrigger",
		Method:             "POST",
		PathPattern:        "/api/workflows/{workflowName}/triggers",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateWorkflowTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWorkflowTriggerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateWorkflowTriggerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteWorkflowTrigger deletes a given workflow trigger
*/
func (a *Client) DeleteWorkflowTrigger(params *DeleteWorkflowTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteWorkflowTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkflowTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkflowTrigger",
		Method:             "DELETE",
		PathPattern:        "/api/workflows/{workflowName}/triggers/{workflowTriggerId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkflowTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWorkflowTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteWorkflowTriggerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWorkflowTrigger gets a workflow trigger
*/
func (a *Client) GetWorkflowTrigger(params *GetWorkflowTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkflowTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflowTrigger",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflowName}/triggers/{workflowTriggerId}",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWorkflowTriggerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWorkflowTriggers gets the list of triggers for this workflow
*/
func (a *Client) GetWorkflowTriggers(params *GetWorkflowTriggersParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkflowTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowTriggersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflowTriggers",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflowName}/triggers",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowTriggersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWorkflowTriggersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateWorkflowTrigger updates a workflow trigger
*/
func (a *Client) UpdateWorkflowTrigger(params *UpdateWorkflowTriggerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateWorkflowTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWorkflowTriggerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWorkflowTrigger",
		Method:             "PUT",
		PathPattern:        "/api/workflows/{workflowName}/triggers/{workflowTriggerId}",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWorkflowTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWorkflowTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateWorkflowTriggerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
