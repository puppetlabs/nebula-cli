// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Integration integration
// swagger:model Integration
type Integration struct {
	IntegrationSummary

	Lifecycle

	// auth
	// Required: true
	Auth *IntegrationAO2Auth `json:"auth"`

	// The event sources exposed by this integration
	EventSources []*EventSourceSummary `json:"event_sources"`

	// Time of last integration call
	LastUsed string `json:"last_used,omitempty"`

	// The workflow triggers that use this integration
	WorkflowTriggers []*WorkflowTriggerSummary `json:"workflow_triggers"`

	// The workflows being used by this integration
	// Required: true
	Workflows []*WorkflowSummary `json:"workflows"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Integration) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 IntegrationSummary
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.IntegrationSummary = aO0

	// AO1
	var aO1 Lifecycle
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.Lifecycle = aO1

	// AO2
	var dataAO2 struct {
		Auth *IntegrationAO2Auth `json:"auth"`

		EventSources []*EventSourceSummary `json:"event_sources"`

		LastUsed string `json:"last_used,omitempty"`

		WorkflowTriggers []*WorkflowTriggerSummary `json:"workflow_triggers"`

		Workflows []*WorkflowSummary `json:"workflows"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.Auth = dataAO2.Auth

	m.EventSources = dataAO2.EventSources

	m.LastUsed = dataAO2.LastUsed

	m.WorkflowTriggers = dataAO2.WorkflowTriggers

	m.Workflows = dataAO2.Workflows

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Integration) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.IntegrationSummary)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.Lifecycle)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	var dataAO2 struct {
		Auth *IntegrationAO2Auth `json:"auth"`

		EventSources []*EventSourceSummary `json:"event_sources"`

		LastUsed string `json:"last_used,omitempty"`

		WorkflowTriggers []*WorkflowTriggerSummary `json:"workflow_triggers"`

		Workflows []*WorkflowSummary `json:"workflows"`
	}

	dataAO2.Auth = m.Auth

	dataAO2.EventSources = m.EventSources

	dataAO2.LastUsed = m.LastUsed

	dataAO2.WorkflowTriggers = m.WorkflowTriggers

	dataAO2.Workflows = m.Workflows

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this integration
func (m *Integration) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with IntegrationSummary
	if err := m.IntegrationSummary.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with Lifecycle
	if err := m.Lifecycle.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowTriggers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Integration) validateAuth(formats strfmt.Registry) error {

	if err := validate.Required("auth", "body", m.Auth); err != nil {
		return err
	}

	if m.Auth != nil {
		if err := m.Auth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("auth")
			}
			return err
		}
	}

	return nil
}

func (m *Integration) validateEventSources(formats strfmt.Registry) error {

	if swag.IsZero(m.EventSources) { // not required
		return nil
	}

	for i := 0; i < len(m.EventSources); i++ {
		if swag.IsZero(m.EventSources[i]) { // not required
			continue
		}

		if m.EventSources[i] != nil {
			if err := m.EventSources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("event_sources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Integration) validateWorkflowTriggers(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowTriggers) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkflowTriggers); i++ {
		if swag.IsZero(m.WorkflowTriggers[i]) { // not required
			continue
		}

		if m.WorkflowTriggers[i] != nil {
			if err := m.WorkflowTriggers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflow_triggers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Integration) validateWorkflows(formats strfmt.Registry) error {

	if err := validate.Required("workflows", "body", m.Workflows); err != nil {
		return err
	}

	for i := 0; i < len(m.Workflows); i++ {
		if swag.IsZero(m.Workflows[i]) { // not required
			continue
		}

		if m.Workflows[i] != nil {
			if err := m.Workflows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Integration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Integration) UnmarshalBinary(b []byte) error {
	var res Integration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IntegrationAO2Auth The authentication details of this integration
// swagger:model IntegrationAO2Auth
type IntegrationAO2Auth struct {

	// The authentication method
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this integration a o2 auth
func (m *IntegrationAO2Auth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationAO2Auth) validateType(formats strfmt.Registry) error {

	if err := validate.Required("auth"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationAO2Auth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationAO2Auth) UnmarshalBinary(b []byte) error {
	var res IntegrationAO2Auth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
