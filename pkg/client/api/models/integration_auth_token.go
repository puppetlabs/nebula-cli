// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationAuthToken Token authentication
// swagger:model IntegrationAuthToken
type IntegrationAuthToken struct {

	// The fields to use for authenticating
	// Required: true
	Fields interface{} `json:"fields"`

	// The integration provider to authenticate with
	// Required: true
	Provider *string `json:"provider"`

	// type
	// Required: true
	// Enum: [token]
	Type *string `json:"type"`
}

// Validate validates this integration auth token
func (m *IntegrationAuthToken) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationAuthToken) validateFields(formats strfmt.Registry) error {

	if err := validate.Required("fields", "body", m.Fields); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationAuthToken) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

var integrationAuthTokenTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["token"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationAuthTokenTypeTypePropEnum = append(integrationAuthTokenTypeTypePropEnum, v)
	}
}

const (

	// IntegrationAuthTokenTypeToken captures enum value "token"
	IntegrationAuthTokenTypeToken string = "token"
)

// prop value enum
func (m *IntegrationAuthToken) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, integrationAuthTokenTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IntegrationAuthToken) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationAuthToken) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationAuthToken) UnmarshalBinary(b []byte) error {
	var res IntegrationAuthToken
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
