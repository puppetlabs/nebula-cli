// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowRunSummary A minimal representation of a workflow run
// swagger:model WorkflowRunSummary
type WorkflowRunSummary struct {

	// Time at which the workflow execution ended
	EndedAt string `json:"ended_at,omitempty"`

	// Workflow run id
	// Required: true
	ID *string `json:"id"`

	// Ordered index of this run of the corresponding workflow instance
	// Required: true
	RunNumber *int64 `json:"run_number"`

	// Time at which workflow execution started
	StartedAt string `json:"started_at,omitempty"`

	// Current status of the workflow
	// Required: true
	// Enum: [success failure in-progress pending]
	Status *string `json:"status"`
}

// Validate validates this workflow run summary
func (m *WorkflowRunSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowRunSummary) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowRunSummary) validateRunNumber(formats strfmt.Registry) error {

	if err := validate.Required("run_number", "body", m.RunNumber); err != nil {
		return err
	}

	return nil
}

var workflowRunSummaryTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","failure","in-progress","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowRunSummaryTypeStatusPropEnum = append(workflowRunSummaryTypeStatusPropEnum, v)
	}
}

const (

	// WorkflowRunSummaryStatusSuccess captures enum value "success"
	WorkflowRunSummaryStatusSuccess string = "success"

	// WorkflowRunSummaryStatusFailure captures enum value "failure"
	WorkflowRunSummaryStatusFailure string = "failure"

	// WorkflowRunSummaryStatusInProgress captures enum value "in-progress"
	WorkflowRunSummaryStatusInProgress string = "in-progress"

	// WorkflowRunSummaryStatusPending captures enum value "pending"
	WorkflowRunSummaryStatusPending string = "pending"
)

// prop value enum
func (m *WorkflowRunSummary) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workflowRunSummaryTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowRunSummary) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowRunSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowRunSummary) UnmarshalBinary(b []byte) error {
	var res WorkflowRunSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
