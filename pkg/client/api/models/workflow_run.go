// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowRun workflow run
// swagger:model WorkflowRun
type WorkflowRun struct {
	WorkflowRunSummary

	Lifecycle

	// parameters
	Parameters WorkflowRunParameters `json:"parameters,omitempty"`

	// A list of workflow steps
	// Required: true
	Steps []*WorkflowRunStep `json:"steps"`

	// workflow
	// Required: true
	Workflow *Workflow `json:"workflow"`

	// workflow data
	WorkflowData *WorkflowData `json:"workflow_data,omitempty"`

	// Base64-encoded YAML representation of the workflow run
	WorkflowYaml string `json:"workflow_yaml,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowRun) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkflowRunSummary
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkflowRunSummary = aO0

	// AO1
	var aO1 Lifecycle
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.Lifecycle = aO1

	// AO2
	var dataAO2 struct {
		Parameters WorkflowRunParameters `json:"parameters,omitempty"`

		Steps []*WorkflowRunStep `json:"steps"`

		Workflow *Workflow `json:"workflow"`

		WorkflowData *WorkflowData `json:"workflow_data,omitempty"`

		WorkflowYaml string `json:"workflow_yaml,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.Parameters = dataAO2.Parameters

	m.Steps = dataAO2.Steps

	m.Workflow = dataAO2.Workflow

	m.WorkflowData = dataAO2.WorkflowData

	m.WorkflowYaml = dataAO2.WorkflowYaml

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowRun) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.WorkflowRunSummary)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.Lifecycle)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	var dataAO2 struct {
		Parameters WorkflowRunParameters `json:"parameters,omitempty"`

		Steps []*WorkflowRunStep `json:"steps"`

		Workflow *Workflow `json:"workflow"`

		WorkflowData *WorkflowData `json:"workflow_data,omitempty"`

		WorkflowYaml string `json:"workflow_yaml,omitempty"`
	}

	dataAO2.Parameters = m.Parameters

	dataAO2.Steps = m.Steps

	dataAO2.Workflow = m.Workflow

	dataAO2.WorkflowData = m.WorkflowData

	dataAO2.WorkflowYaml = m.WorkflowYaml

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow run
func (m *WorkflowRun) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkflowRunSummary
	if err := m.WorkflowRunSummary.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with Lifecycle
	if err := m.Lifecycle.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSteps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowRun) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if err := m.Parameters.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parameters")
		}
		return err
	}

	return nil
}

func (m *WorkflowRun) validateSteps(formats strfmt.Registry) error {

	if err := validate.Required("steps", "body", m.Steps); err != nil {
		return err
	}

	for i := 0; i < len(m.Steps); i++ {
		if swag.IsZero(m.Steps[i]) { // not required
			continue
		}

		if m.Steps[i] != nil {
			if err := m.Steps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowRun) validateWorkflow(formats strfmt.Registry) error {

	if err := validate.Required("workflow", "body", m.Workflow); err != nil {
		return err
	}

	if m.Workflow != nil {
		if err := m.Workflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflow")
			}
			return err
		}
	}

	return nil
}

func (m *WorkflowRun) validateWorkflowData(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowData) { // not required
		return nil
	}

	if m.WorkflowData != nil {
		if err := m.WorkflowData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflow_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowRun) UnmarshalBinary(b []byte) error {
	var res WorkflowRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
