// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowRun An individual workflow run record
// swagger:model WorkflowRun
type WorkflowRun struct {

	// Time at which the workflow execution ended
	EndedAt string `json:"ended_at,omitempty"`

	// Workflow run ID
	// Required: true
	ID *string `json:"id"`

	// Incremented run number of the associated workflow
	// Required: true
	RunNumber *int64 `json:"run_number"`

	// Time at which workflow execution started
	StartedAt string `json:"started_at,omitempty"`

	// Top level workflow run status
	// Required: true
	// Enum: [success failure in-progress pending]
	Status *string `json:"status"`

	// An array of workflow steps
	// Required: true
	Steps []*WorkflowRunStep `json:"steps"`

	// workflow
	// Required: true
	Workflow *Workflow `json:"workflow"`

	// The raw json representation of the workflow at the time of execution
	WorkflowData interface{} `json:"workflow_data,omitempty"`

	// base 64 encoded yaml representation of the workflow run
	WorkflowYaml string `json:"workflow_yaml,omitempty"`
}

// Validate validates this workflow run
func (m *WorkflowRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSteps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowRun) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowRun) validateRunNumber(formats strfmt.Registry) error {

	if err := validate.Required("run_number", "body", m.RunNumber); err != nil {
		return err
	}

	return nil
}

var workflowRunTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","failure","in-progress","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowRunTypeStatusPropEnum = append(workflowRunTypeStatusPropEnum, v)
	}
}

const (

	// WorkflowRunStatusSuccess captures enum value "success"
	WorkflowRunStatusSuccess string = "success"

	// WorkflowRunStatusFailure captures enum value "failure"
	WorkflowRunStatusFailure string = "failure"

	// WorkflowRunStatusInProgress captures enum value "in-progress"
	WorkflowRunStatusInProgress string = "in-progress"

	// WorkflowRunStatusPending captures enum value "pending"
	WorkflowRunStatusPending string = "pending"
)

// prop value enum
func (m *WorkflowRun) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workflowRunTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowRun) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowRun) validateSteps(formats strfmt.Registry) error {

	if err := validate.Required("steps", "body", m.Steps); err != nil {
		return err
	}

	for i := 0; i < len(m.Steps); i++ {
		if swag.IsZero(m.Steps[i]) { // not required
			continue
		}

		if m.Steps[i] != nil {
			if err := m.Steps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WorkflowRun) validateWorkflow(formats strfmt.Registry) error {

	if err := validate.Required("workflow", "body", m.Workflow); err != nil {
		return err
	}

	if m.Workflow != nil {
		if err := m.Workflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowRun) UnmarshalBinary(b []byte) error {
	var res WorkflowRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
