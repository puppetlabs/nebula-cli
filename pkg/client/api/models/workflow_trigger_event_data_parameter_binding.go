// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowTriggerEventDataParameterBinding A binding of a workflow parmaeter from event data
// swagger:model WorkflowTriggerEventDataParameterBinding
type WorkflowTriggerEventDataParameterBinding struct {

	// The event data field to bind
	// Required: true
	Field *string `json:"field"`

	// The type of the binding
	// Required: true
	// Enum: [event_data]
	Type interface{} `json:"type"`
}

// Validate validates this workflow trigger event data parameter binding
func (m *WorkflowTriggerEventDataParameterBinding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowTriggerEventDataParameterBinding) validateField(formats strfmt.Registry) error {

	if err := validate.Required("field", "body", m.Field); err != nil {
		return err
	}

	return nil
}

var workflowTriggerEventDataParameterBindingTypeTypePropEnum []interface{}

func init() {
	var res []interface{}
	if err := json.Unmarshal([]byte(`["event_data"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowTriggerEventDataParameterBindingTypeTypePropEnum = append(workflowTriggerEventDataParameterBindingTypeTypePropEnum, v)
	}
}

// prop value enum
func (m *WorkflowTriggerEventDataParameterBinding) validateTypeEnum(path, location string, value interface{}) error {
	if err := validate.Enum(path, location, value, workflowTriggerEventDataParameterBindingTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkflowTriggerEventDataParameterBinding) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowTriggerEventDataParameterBinding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowTriggerEventDataParameterBinding) UnmarshalBinary(b []byte) error {
	var res WorkflowTriggerEventDataParameterBinding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
