// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventType event type
// swagger:model EventType
type EventType struct {
	EventTypeSummary

	// The schema for data attributes exposed by dispatched events of this type
	DataSchema map[string]ValueTypedLabeled `json:"data_schema,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EventType) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EventTypeSummary
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EventTypeSummary = aO0

	// AO1
	var dataAO1 struct {
		DataSchema map[string]ValueTypedLabeled `json:"data_schema,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.DataSchema = dataAO1.DataSchema

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EventType) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EventTypeSummary)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		DataSchema map[string]ValueTypedLabeled `json:"data_schema,omitempty"`
	}

	dataAO1.DataSchema = m.DataSchema

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this event type
func (m *EventType) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EventTypeSummary
	if err := m.EventTypeSummary.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSchema(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventType) validateDataSchema(formats strfmt.Registry) error {

	if swag.IsZero(m.DataSchema) { // not required
		return nil
	}

	for k := range m.DataSchema {

		if err := validate.Required("data_schema"+"."+k, "body", m.DataSchema[k]); err != nil {
			return err
		}
		if val, ok := m.DataSchema[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventType) UnmarshalBinary(b []byte) error {
	var res EventType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
