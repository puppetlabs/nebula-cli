// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ErrawrResponse Generic HTTP success response
// swagger:model ErrawrResponse
type ErrawrResponse struct {

	// error
	Error *ErrawrResponseError `json:"error,omitempty"`
}

// Validate validates this errawr response
func (m *ErrawrResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrawrResponse) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrawrResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrawrResponse) UnmarshalBinary(b []byte) error {
	var res ErrawrResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrawrResponseError errawr response error
// swagger:model ErrawrResponseError
type ErrawrResponseError struct {

	// arguments
	Arguments *ErrawrResponseErrorArguments `json:"arguments,omitempty"`

	// code
	Code string `json:"code,omitempty"`

	// description
	Description *ErrawrResponseErrorDescription `json:"description,omitempty"`

	// domain
	Domain string `json:"domain,omitempty"`

	// formatted
	Formatted *ErrawrResponseErrorFormatted `json:"formatted,omitempty"`

	// section
	Section string `json:"section,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this errawr response error
func (m *ErrawrResponseError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArguments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormatted(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrawrResponseError) validateArguments(formats strfmt.Registry) error {

	if swag.IsZero(m.Arguments) { // not required
		return nil
	}

	if m.Arguments != nil {
		if err := m.Arguments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error" + "." + "arguments")
			}
			return err
		}
	}

	return nil
}

func (m *ErrawrResponseError) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error" + "." + "description")
			}
			return err
		}
	}

	return nil
}

func (m *ErrawrResponseError) validateFormatted(formats strfmt.Registry) error {

	if swag.IsZero(m.Formatted) { // not required
		return nil
	}

	if m.Formatted != nil {
		if err := m.Formatted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error" + "." + "formatted")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrawrResponseError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrawrResponseError) UnmarshalBinary(b []byte) error {
	var res ErrawrResponseError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrawrResponseErrorArguments errawr response error arguments
// swagger:model ErrawrResponseErrorArguments
type ErrawrResponseErrorArguments struct {

	// attribute
	Attribute string `json:"attribute,omitempty"`

	// model
	Model string `json:"model,omitempty"`
}

// Validate validates this errawr response error arguments
func (m *ErrawrResponseErrorArguments) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrawrResponseErrorArguments) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrawrResponseErrorArguments) UnmarshalBinary(b []byte) error {
	var res ErrawrResponseErrorArguments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrawrResponseErrorDescription errawr response error description
// swagger:model ErrawrResponseErrorDescription
type ErrawrResponseErrorDescription struct {

	// friendly
	Friendly string `json:"friendly,omitempty"`

	// technical
	Technical string `json:"technical,omitempty"`
}

// Validate validates this errawr response error description
func (m *ErrawrResponseErrorDescription) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrawrResponseErrorDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrawrResponseErrorDescription) UnmarshalBinary(b []byte) error {
	var res ErrawrResponseErrorDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrawrResponseErrorFormatted errawr response error formatted
// swagger:model ErrawrResponseErrorFormatted
type ErrawrResponseErrorFormatted struct {

	// friendly
	Friendly string `json:"friendly,omitempty"`

	// technical
	Technical string `json:"technical,omitempty"`
}

// Validate validates this errawr response error formatted
func (m *ErrawrResponseErrorFormatted) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrawrResponseErrorFormatted) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrawrResponseErrorFormatted) UnmarshalBinary(b []byte) error {
	var res ErrawrResponseErrorFormatted
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
