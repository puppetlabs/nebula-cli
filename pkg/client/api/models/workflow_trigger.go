// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WorkflowTrigger workflow trigger
// swagger:model WorkflowTrigger
type WorkflowTrigger struct {
	WorkflowTriggerSummary

	Lifecycle

	// binding
	Binding *WorkflowTriggerBinding `json:"binding,omitempty"`

	// event source
	EventSource *EventSourceSummary `json:"event_source,omitempty"`

	// event type
	EventType *EventTypeSummary `json:"event_type,omitempty"`

	// settings
	Settings WorkflowTriggerSettings `json:"settings,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowTrigger) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkflowTriggerSummary
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkflowTriggerSummary = aO0

	// AO1
	var aO1 Lifecycle
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.Lifecycle = aO1

	// AO2
	var dataAO2 struct {
		Binding *WorkflowTriggerBinding `json:"binding,omitempty"`

		EventSource *EventSourceSummary `json:"event_source,omitempty"`

		EventType *EventTypeSummary `json:"event_type,omitempty"`

		Settings WorkflowTriggerSettings `json:"settings,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.Binding = dataAO2.Binding

	m.EventSource = dataAO2.EventSource

	m.EventType = dataAO2.EventType

	m.Settings = dataAO2.Settings

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowTrigger) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.WorkflowTriggerSummary)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.Lifecycle)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	var dataAO2 struct {
		Binding *WorkflowTriggerBinding `json:"binding,omitempty"`

		EventSource *EventSourceSummary `json:"event_source,omitempty"`

		EventType *EventTypeSummary `json:"event_type,omitempty"`

		Settings WorkflowTriggerSettings `json:"settings,omitempty"`
	}

	dataAO2.Binding = m.Binding

	dataAO2.EventSource = m.EventSource

	dataAO2.EventType = m.EventType

	dataAO2.Settings = m.Settings

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow trigger
func (m *WorkflowTrigger) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkflowTriggerSummary
	if err := m.WorkflowTriggerSummary.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with Lifecycle
	if err := m.Lifecycle.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBinding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowTrigger) validateBinding(formats strfmt.Registry) error {

	if swag.IsZero(m.Binding) { // not required
		return nil
	}

	if m.Binding != nil {
		if err := m.Binding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("binding")
			}
			return err
		}
	}

	return nil
}

func (m *WorkflowTrigger) validateEventSource(formats strfmt.Registry) error {

	if swag.IsZero(m.EventSource) { // not required
		return nil
	}

	if m.EventSource != nil {
		if err := m.EventSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_source")
			}
			return err
		}
	}

	return nil
}

func (m *WorkflowTrigger) validateEventType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if m.EventType != nil {
		if err := m.EventType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_type")
			}
			return err
		}
	}

	return nil
}

func (m *WorkflowTrigger) validateSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if err := m.Settings.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("settings")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowTrigger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowTrigger) UnmarshalBinary(b []byte) error {
	var res WorkflowTrigger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
