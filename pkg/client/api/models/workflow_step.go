// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowStep An individual workflow step
// swagger:model WorkflowStep
type WorkflowStep struct {

	// Command arguments
	Args []string `json:"args"`

	// Command to issue
	Command string `json:"command,omitempty"`

	// Step names that must complete before this one starts
	DependsOn []string `json:"depends_on"`

	// Container image on which step is executed
	// Required: true
	Image *string `json:"image"`

	// Input script to execute
	Input []string `json:"input"`

	// A user provided step name. Must be unique within the workflow definition
	// Required: true
	Name *string `json:"name"`

	// Variable specification data to provide to the container
	Spec interface{} `json:"spec,omitempty"`
}

// Validate validates this workflow step
func (m *WorkflowStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowStep) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowStep) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowStep) UnmarshalBinary(b []byte) error {
	var res WorkflowStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
