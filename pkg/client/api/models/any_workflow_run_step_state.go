// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnyWorkflowRunStepState any workflow run step state
// swagger:model AnyWorkflowRunStepState
type AnyWorkflowRunStepState struct {

	// Time at which the step execution ended
	// Format: date-time
	EndedAt *strfmt.DateTime `json:"ended_at,omitempty"`

	// Time at which step execution started
	// Format: date-time
	StartedAt *strfmt.DateTime `json:"started_at,omitempty"`

	// Workflow run step status
	// Required: true
	// Enum: [success failure in-progress pending skipped cancelled]
	Status *string `json:"status"`
}

// Validate validates this any workflow run step state
func (m *AnyWorkflowRunStepState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnyWorkflowRunStepState) validateEndedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.EndedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("ended_at", "body", "date-time", m.EndedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AnyWorkflowRunStepState) validateStartedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("started_at", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var anyWorkflowRunStepStateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","failure","in-progress","pending","skipped","cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		anyWorkflowRunStepStateTypeStatusPropEnum = append(anyWorkflowRunStepStateTypeStatusPropEnum, v)
	}
}

const (

	// AnyWorkflowRunStepStateStatusSuccess captures enum value "success"
	AnyWorkflowRunStepStateStatusSuccess string = "success"

	// AnyWorkflowRunStepStateStatusFailure captures enum value "failure"
	AnyWorkflowRunStepStateStatusFailure string = "failure"

	// AnyWorkflowRunStepStateStatusInProgress captures enum value "in-progress"
	AnyWorkflowRunStepStateStatusInProgress string = "in-progress"

	// AnyWorkflowRunStepStateStatusPending captures enum value "pending"
	AnyWorkflowRunStepStateStatusPending string = "pending"

	// AnyWorkflowRunStepStateStatusSkipped captures enum value "skipped"
	AnyWorkflowRunStepStateStatusSkipped string = "skipped"

	// AnyWorkflowRunStepStateStatusCancelled captures enum value "cancelled"
	AnyWorkflowRunStepStateStatusCancelled string = "cancelled"
)

// prop value enum
func (m *AnyWorkflowRunStepState) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, anyWorkflowRunStepStateTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AnyWorkflowRunStepState) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnyWorkflowRunStepState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnyWorkflowRunStepState) UnmarshalBinary(b []byte) error {
	var res AnyWorkflowRunStepState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
