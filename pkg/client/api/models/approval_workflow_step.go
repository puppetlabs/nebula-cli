// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApprovalWorkflowStep approval workflow step
// swagger:model ApprovalWorkflowStep
type ApprovalWorkflowStep struct {
	AnyWorkflowStep

	// Type of step
	// Required: true
	// Enum: [approval]
	Type *string `json:"type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ApprovalWorkflowStep) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AnyWorkflowStep
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AnyWorkflowStep = aO0

	// AO1
	var dataAO1 struct {
		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Type = dataAO1.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ApprovalWorkflowStep) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.AnyWorkflowStep)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Type *string `json:"type"`
	}

	dataAO1.Type = m.Type

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this approval workflow step
func (m *ApprovalWorkflowStep) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AnyWorkflowStep
	if err := m.AnyWorkflowStep.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var approvalWorkflowStepTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["approval"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		approvalWorkflowStepTypeTypePropEnum = append(approvalWorkflowStepTypeTypePropEnum, v)
	}
}

// property enum
func (m *ApprovalWorkflowStep) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, approvalWorkflowStepTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ApprovalWorkflowStep) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApprovalWorkflowStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApprovalWorkflowStep) UnmarshalBinary(b []byte) error {
	var res ApprovalWorkflowStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
