// Code generated by go-swagger; DO NOT EDIT.

package workflow_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// RunWorkflowReader is a Reader for the RunWorkflow structure.
type RunWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewRunWorkflowCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewRunWorkflowDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRunWorkflowCreated creates a RunWorkflowCreated with default headers values
func NewRunWorkflowCreated() *RunWorkflowCreated {
	return &RunWorkflowCreated{}
}

/*RunWorkflowCreated handles this case with default header values.

Metadata about the workflow run
*/
type RunWorkflowCreated struct {
	Payload *RunWorkflowCreatedBody
}

func (o *RunWorkflowCreated) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflowName}/runs][%d] runWorkflowCreated  %+v", 201, o.Payload)
}

func (o *RunWorkflowCreated) GetPayload() *RunWorkflowCreatedBody {
	return o.Payload
}

func (o *RunWorkflowCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RunWorkflowCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunWorkflowDefault creates a RunWorkflowDefault with default headers values
func NewRunWorkflowDefault(code int) *RunWorkflowDefault {
	return &RunWorkflowDefault{
		_statusCode: code,
	}
}

/*RunWorkflowDefault handles this case with default header values.

An error occurred
*/
type RunWorkflowDefault struct {
	_statusCode int

	Payload *RunWorkflowDefaultBody
}

// Code gets the status code for the run workflow default response
func (o *RunWorkflowDefault) Code() int {
	return o._statusCode
}

func (o *RunWorkflowDefault) Error() string {
	return fmt.Sprintf("[POST /api/workflows/{workflowName}/runs][%d] runWorkflow default  %+v", o._statusCode, o.Payload)
}

func (o *RunWorkflowDefault) GetPayload() *RunWorkflowDefaultBody {
	return o.Payload
}

func (o *RunWorkflowDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RunWorkflowDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*RunWorkflowBody Fields to create a workflow run
swagger:model RunWorkflowBody
*/
type RunWorkflowBody struct {

	// parameters
	Parameters models.WorkflowRunParameters `json:"parameters,omitempty"`
}

// Validate validates this run workflow body
func (o *RunWorkflowBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RunWorkflowBody) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(o.Parameters) { // not required
		return nil
	}

	if err := o.Parameters.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "parameters")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RunWorkflowBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RunWorkflowBody) UnmarshalBinary(b []byte) error {
	var res RunWorkflowBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RunWorkflowCreatedBody run workflow created body
swagger:model RunWorkflowCreatedBody
*/
type RunWorkflowCreatedBody struct {
	models.Entity

	// run
	Run *models.WorkflowRun `json:"run,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RunWorkflowCreatedBody) UnmarshalJSON(raw []byte) error {
	// RunWorkflowCreatedBodyAO0
	var runWorkflowCreatedBodyAO0 models.Entity
	if err := swag.ReadJSON(raw, &runWorkflowCreatedBodyAO0); err != nil {
		return err
	}
	o.Entity = runWorkflowCreatedBodyAO0

	// RunWorkflowCreatedBodyAO1
	var dataRunWorkflowCreatedBodyAO1 struct {
		Run *models.WorkflowRun `json:"run,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataRunWorkflowCreatedBodyAO1); err != nil {
		return err
	}

	o.Run = dataRunWorkflowCreatedBodyAO1.Run

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RunWorkflowCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	runWorkflowCreatedBodyAO0, err := swag.WriteJSON(o.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, runWorkflowCreatedBodyAO0)

	var dataRunWorkflowCreatedBodyAO1 struct {
		Run *models.WorkflowRun `json:"run,omitempty"`
	}

	dataRunWorkflowCreatedBodyAO1.Run = o.Run

	jsonDataRunWorkflowCreatedBodyAO1, errRunWorkflowCreatedBodyAO1 := swag.WriteJSON(dataRunWorkflowCreatedBodyAO1)
	if errRunWorkflowCreatedBodyAO1 != nil {
		return nil, errRunWorkflowCreatedBodyAO1
	}
	_parts = append(_parts, jsonDataRunWorkflowCreatedBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this run workflow created body
func (o *RunWorkflowCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Entity
	if err := o.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRun(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RunWorkflowCreatedBody) validateRun(formats strfmt.Registry) error {

	if swag.IsZero(o.Run) { // not required
		return nil
	}

	if o.Run != nil {
		if err := o.Run.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runWorkflowCreated" + "." + "run")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RunWorkflowCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RunWorkflowCreatedBody) UnmarshalBinary(b []byte) error {
	var res RunWorkflowCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RunWorkflowDefaultBody Error response
swagger:model RunWorkflowDefaultBody
*/
type RunWorkflowDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this run workflow default body
func (o *RunWorkflowDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RunWorkflowDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runWorkflow default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RunWorkflowDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RunWorkflowDefaultBody) UnmarshalBinary(b []byte) error {
	var res RunWorkflowDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
