// Code generated by go-swagger; DO NOT EDIT.

package workflow_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPatchWorkflowRunStepParams creates a new PatchWorkflowRunStepParams object
// with the default values initialized.
func NewPatchWorkflowRunStepParams() *PatchWorkflowRunStepParams {
	var ()
	return &PatchWorkflowRunStepParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchWorkflowRunStepParamsWithTimeout creates a new PatchWorkflowRunStepParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchWorkflowRunStepParamsWithTimeout(timeout time.Duration) *PatchWorkflowRunStepParams {
	var ()
	return &PatchWorkflowRunStepParams{

		timeout: timeout,
	}
}

// NewPatchWorkflowRunStepParamsWithContext creates a new PatchWorkflowRunStepParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchWorkflowRunStepParamsWithContext(ctx context.Context) *PatchWorkflowRunStepParams {
	var ()
	return &PatchWorkflowRunStepParams{

		Context: ctx,
	}
}

// NewPatchWorkflowRunStepParamsWithHTTPClient creates a new PatchWorkflowRunStepParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchWorkflowRunStepParamsWithHTTPClient(client *http.Client) *PatchWorkflowRunStepParams {
	var ()
	return &PatchWorkflowRunStepParams{
		HTTPClient: client,
	}
}

/*PatchWorkflowRunStepParams contains all the parameters to send to the API endpoint
for the patch workflow run step operation typically these are written to a http.Request
*/
type PatchWorkflowRunStepParams struct {

	/*Body
	  Update properties of workflow run step, e.g. rejecting an approval step. Omitted properties will be ignored.

	*/
	Body PatchWorkflowRunStepBody
	/*WorkflowName
	  Workflow name

	*/
	WorkflowName string
	/*WorkflowRunNumber
	  Run number of the associated workflow

	*/
	WorkflowRunNumber int64
	/*WorkflowStepName
	  The name of the step in the associated workflow

	*/
	WorkflowStepName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch workflow run step params
func (o *PatchWorkflowRunStepParams) WithTimeout(timeout time.Duration) *PatchWorkflowRunStepParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch workflow run step params
func (o *PatchWorkflowRunStepParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch workflow run step params
func (o *PatchWorkflowRunStepParams) WithContext(ctx context.Context) *PatchWorkflowRunStepParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch workflow run step params
func (o *PatchWorkflowRunStepParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch workflow run step params
func (o *PatchWorkflowRunStepParams) WithHTTPClient(client *http.Client) *PatchWorkflowRunStepParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch workflow run step params
func (o *PatchWorkflowRunStepParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the patch workflow run step params
func (o *PatchWorkflowRunStepParams) WithBody(body PatchWorkflowRunStepBody) *PatchWorkflowRunStepParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch workflow run step params
func (o *PatchWorkflowRunStepParams) SetBody(body PatchWorkflowRunStepBody) {
	o.Body = body
}

// WithWorkflowName adds the workflowName to the patch workflow run step params
func (o *PatchWorkflowRunStepParams) WithWorkflowName(workflowName string) *PatchWorkflowRunStepParams {
	o.SetWorkflowName(workflowName)
	return o
}

// SetWorkflowName adds the workflowName to the patch workflow run step params
func (o *PatchWorkflowRunStepParams) SetWorkflowName(workflowName string) {
	o.WorkflowName = workflowName
}

// WithWorkflowRunNumber adds the workflowRunNumber to the patch workflow run step params
func (o *PatchWorkflowRunStepParams) WithWorkflowRunNumber(workflowRunNumber int64) *PatchWorkflowRunStepParams {
	o.SetWorkflowRunNumber(workflowRunNumber)
	return o
}

// SetWorkflowRunNumber adds the workflowRunNumber to the patch workflow run step params
func (o *PatchWorkflowRunStepParams) SetWorkflowRunNumber(workflowRunNumber int64) {
	o.WorkflowRunNumber = workflowRunNumber
}

// WithWorkflowStepName adds the workflowStepName to the patch workflow run step params
func (o *PatchWorkflowRunStepParams) WithWorkflowStepName(workflowStepName string) *PatchWorkflowRunStepParams {
	o.SetWorkflowStepName(workflowStepName)
	return o
}

// SetWorkflowStepName adds the workflowStepName to the patch workflow run step params
func (o *PatchWorkflowRunStepParams) SetWorkflowStepName(workflowStepName string) {
	o.WorkflowStepName = workflowStepName
}

// WriteToRequest writes these params to a swagger request
func (o *PatchWorkflowRunStepParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param workflowName
	if err := r.SetPathParam("workflowName", o.WorkflowName); err != nil {
		return err
	}

	// path param workflowRunNumber
	if err := r.SetPathParam("workflowRunNumber", swag.FormatInt64(o.WorkflowRunNumber)); err != nil {
		return err
	}

	// path param workflowStepName
	if err := r.SetPathParam("workflowStepName", o.WorkflowStepName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
