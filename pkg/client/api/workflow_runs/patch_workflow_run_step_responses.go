// Code generated by go-swagger; DO NOT EDIT.

package workflow_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// PatchWorkflowRunStepReader is a Reader for the PatchWorkflowRunStep structure.
type PatchWorkflowRunStepReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchWorkflowRunStepReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchWorkflowRunStepOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPatchWorkflowRunStepDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchWorkflowRunStepOK creates a PatchWorkflowRunStepOK with default headers values
func NewPatchWorkflowRunStepOK() *PatchWorkflowRunStepOK {
	return &PatchWorkflowRunStepOK{}
}

/*PatchWorkflowRunStepOK handles this case with default header values.

The updated individual workflow run step
*/
type PatchWorkflowRunStepOK struct {
	Payload *PatchWorkflowRunStepOKBody
}

func (o *PatchWorkflowRunStepOK) Error() string {
	return fmt.Sprintf("[PATCH /api/workflows/{workflowName}/runs/{workflowRunNumber}/steps/{workflowStepName}][%d] patchWorkflowRunStepOK  %+v", 200, o.Payload)
}

func (o *PatchWorkflowRunStepOK) GetPayload() *PatchWorkflowRunStepOKBody {
	return o.Payload
}

func (o *PatchWorkflowRunStepOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchWorkflowRunStepOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchWorkflowRunStepDefault creates a PatchWorkflowRunStepDefault with default headers values
func NewPatchWorkflowRunStepDefault(code int) *PatchWorkflowRunStepDefault {
	return &PatchWorkflowRunStepDefault{
		_statusCode: code,
	}
}

/*PatchWorkflowRunStepDefault handles this case with default header values.

An error occurred
*/
type PatchWorkflowRunStepDefault struct {
	_statusCode int

	Payload *PatchWorkflowRunStepDefaultBody
}

// Code gets the status code for the patch workflow run step default response
func (o *PatchWorkflowRunStepDefault) Code() int {
	return o._statusCode
}

func (o *PatchWorkflowRunStepDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/workflows/{workflowName}/runs/{workflowRunNumber}/steps/{workflowStepName}][%d] patchWorkflowRunStep default  %+v", o._statusCode, o.Payload)
}

func (o *PatchWorkflowRunStepDefault) GetPayload() *PatchWorkflowRunStepDefaultBody {
	return o.Payload
}

func (o *PatchWorkflowRunStepDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PatchWorkflowRunStepDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PatchWorkflowRunStepBody A partial run step object that only updates the `approval` property
swagger:model PatchWorkflowRunStepBody
*/
type PatchWorkflowRunStepBody struct {

	// approval
	// Enum: [waiting rejected approved]
	Approval string `json:"approval,omitempty"`
}

// Validate validates this patch workflow run step body
func (o *PatchWorkflowRunStepBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApproval(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchWorkflowRunStepBodyTypeApprovalPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["waiting","rejected","approved"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchWorkflowRunStepBodyTypeApprovalPropEnum = append(patchWorkflowRunStepBodyTypeApprovalPropEnum, v)
	}
}

const (

	// PatchWorkflowRunStepBodyApprovalWaiting captures enum value "waiting"
	PatchWorkflowRunStepBodyApprovalWaiting string = "waiting"

	// PatchWorkflowRunStepBodyApprovalRejected captures enum value "rejected"
	PatchWorkflowRunStepBodyApprovalRejected string = "rejected"

	// PatchWorkflowRunStepBodyApprovalApproved captures enum value "approved"
	PatchWorkflowRunStepBodyApprovalApproved string = "approved"
)

// prop value enum
func (o *PatchWorkflowRunStepBody) validateApprovalEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, patchWorkflowRunStepBodyTypeApprovalPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PatchWorkflowRunStepBody) validateApproval(formats strfmt.Registry) error {

	if swag.IsZero(o.Approval) { // not required
		return nil
	}

	// value enum
	if err := o.validateApprovalEnum("body"+"."+"approval", "body", o.Approval); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchWorkflowRunStepBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchWorkflowRunStepBody) UnmarshalBinary(b []byte) error {
	var res PatchWorkflowRunStepBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchWorkflowRunStepDefaultBody Error response
swagger:model PatchWorkflowRunStepDefaultBody
*/
type PatchWorkflowRunStepDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this patch workflow run step default body
func (o *PatchWorkflowRunStepDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchWorkflowRunStepDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchWorkflowRunStep default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchWorkflowRunStepDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchWorkflowRunStepDefaultBody) UnmarshalBinary(b []byte) error {
	var res PatchWorkflowRunStepDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PatchWorkflowRunStepOKBody patch workflow run step o k body
swagger:model PatchWorkflowRunStepOKBody
*/
type PatchWorkflowRunStepOKBody struct {
	models.WorkflowRunStepState
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatchWorkflowRunStepOKBody) UnmarshalJSON(raw []byte) error {
	// PatchWorkflowRunStepOKBodyAO0
	var patchWorkflowRunStepOKBodyAO0 models.WorkflowRunStepState
	if err := swag.ReadJSON(raw, &patchWorkflowRunStepOKBodyAO0); err != nil {
		return err
	}
	o.WorkflowRunStepState = patchWorkflowRunStepOKBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatchWorkflowRunStepOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patchWorkflowRunStepOKBodyAO0, err := swag.WriteJSON(o.WorkflowRunStepState)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patchWorkflowRunStepOKBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patch workflow run step o k body
func (o *PatchWorkflowRunStepOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchWorkflowRunStepOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchWorkflowRunStepOKBody) UnmarshalBinary(b []byte) error {
	var res PatchWorkflowRunStepOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
