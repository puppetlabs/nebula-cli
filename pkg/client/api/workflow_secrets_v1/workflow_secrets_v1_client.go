// Code generated by go-swagger; DO NOT EDIT.

package workflow_secrets_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new workflow secrets v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflow secrets v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateWorkflowSecret inserts secret associated with workflow name and user id jwt
*/
func (a *Client) CreateWorkflowSecret(params *CreateWorkflowSecretParams, authInfo runtime.ClientAuthInfoWriter) (*CreateWorkflowSecretCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWorkflowSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWorkflowSecret",
		Method:             "POST",
		PathPattern:        "/api/workflows/{workflow_name}/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateWorkflowSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateWorkflowSecretCreated), nil

}

/*
DeleteSecretByKeyAndWorkflowID deletes the secret associated with the given workflow and secret key
*/
func (a *Client) DeleteSecretByKeyAndWorkflowID(params *DeleteSecretByKeyAndWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSecretByKeyAndWorkflowIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecretByKeyAndWorkflowIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSecretByKeyAndWorkflowID",
		Method:             "DELETE",
		PathPattern:        "/api/workflows/{workflow_name}/secrets/{secret_key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSecretByKeyAndWorkflowIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSecretByKeyAndWorkflowIDOK), nil

}

/*
GetReferencedSecrets returns all the secrets referenced by the workflow yaml when it was run at the given run numer
*/
func (a *Client) GetReferencedSecrets(params *GetReferencedSecretsParams) (*GetReferencedSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReferencedSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReferencedSecrets",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflow_name}/runs/{run_number}/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReferencedSecretsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReferencedSecretsOK), nil

}

/*
ListWorkflowSecrets gets all secrets associated with given workflow id
*/
func (a *Client) ListWorkflowSecrets(params *ListWorkflowSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*ListWorkflowSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWorkflowSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listWorkflowSecrets",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflow_name}/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListWorkflowSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListWorkflowSecretsOK), nil

}

/*
UpdateSecretByKeyAndWorkflowID updates the secret associated with the given workflow and secret key
*/
func (a *Client) UpdateSecretByKeyAndWorkflowID(params *UpdateSecretByKeyAndWorkflowIDParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSecretByKeyAndWorkflowIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSecretByKeyAndWorkflowIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSecretByKeyAndWorkflowID",
		Method:             "PUT",
		PathPattern:        "/api/workflows/{workflow_name}/secrets/{secret_key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSecretByKeyAndWorkflowIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSecretByKeyAndWorkflowIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
