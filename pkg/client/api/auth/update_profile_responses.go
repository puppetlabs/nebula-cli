// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// UpdateProfileReader is a Reader for the UpdateProfile structure.
type UpdateProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUpdateProfileDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateProfileOK creates a UpdateProfileOK with default headers values
func NewUpdateProfileOK() *UpdateProfileOK {
	return &UpdateProfileOK{}
}

/*UpdateProfileOK handles this case with default header values.

The updated user profile
*/
type UpdateProfileOK struct {
	Payload *UpdateProfileOKBody
}

func (o *UpdateProfileOK) Error() string {
	return fmt.Sprintf("[PUT /auth/profile][%d] updateProfileOK  %+v", 200, o.Payload)
}

func (o *UpdateProfileOK) GetPayload() *UpdateProfileOKBody {
	return o.Payload
}

func (o *UpdateProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateProfileOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProfileDefault creates a UpdateProfileDefault with default headers values
func NewUpdateProfileDefault(code int) *UpdateProfileDefault {
	return &UpdateProfileDefault{
		_statusCode: code,
	}
}

/*UpdateProfileDefault handles this case with default header values.

An error occurred
*/
type UpdateProfileDefault struct {
	_statusCode int

	Payload *UpdateProfileDefaultBody
}

// Code gets the status code for the update profile default response
func (o *UpdateProfileDefault) Code() int {
	return o._statusCode
}

func (o *UpdateProfileDefault) Error() string {
	return fmt.Sprintf("[PUT /auth/profile][%d] updateProfile default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateProfileDefault) GetPayload() *UpdateProfileDefaultBody {
	return o.Payload
}

func (o *UpdateProfileDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateProfileDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateProfileBody The editable fields of a Nebula user's profile
swagger:model UpdateProfileBody
*/
type UpdateProfileBody struct {

	// Updated user name
	// Required: true
	Name *string `json:"name"`

	// preferences
	Preferences models.UserPreferences `json:"preferences,omitempty"`
}

// Validate validates this update profile body
func (o *UpdateProfileBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateProfileBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateProfileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateProfileBody) UnmarshalBinary(b []byte) error {
	var res UpdateProfileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateProfileDefaultBody Error response
swagger:model UpdateProfileDefaultBody
*/
type UpdateProfileDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this update profile default body
func (o *UpdateProfileDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateProfileDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateProfile default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateProfileDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateProfileDefaultBody) UnmarshalBinary(b []byte) error {
	var res UpdateProfileDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateProfileOKBody update profile o k body
swagger:model UpdateProfileOKBody
*/
type UpdateProfileOKBody struct {
	models.ProfileEntity

	// user
	User *models.UserProfile `json:"user,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *UpdateProfileOKBody) UnmarshalJSON(raw []byte) error {
	// UpdateProfileOKBodyAO0
	var updateProfileOKBodyAO0 models.ProfileEntity
	if err := swag.ReadJSON(raw, &updateProfileOKBodyAO0); err != nil {
		return err
	}
	o.ProfileEntity = updateProfileOKBodyAO0

	// UpdateProfileOKBodyAO1
	var dataUpdateProfileOKBodyAO1 struct {
		User *models.UserProfile `json:"user,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataUpdateProfileOKBodyAO1); err != nil {
		return err
	}

	o.User = dataUpdateProfileOKBodyAO1.User

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o UpdateProfileOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	updateProfileOKBodyAO0, err := swag.WriteJSON(o.ProfileEntity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, updateProfileOKBodyAO0)

	var dataUpdateProfileOKBodyAO1 struct {
		User *models.UserProfile `json:"user,omitempty"`
	}

	dataUpdateProfileOKBodyAO1.User = o.User

	jsonDataUpdateProfileOKBodyAO1, errUpdateProfileOKBodyAO1 := swag.WriteJSON(dataUpdateProfileOKBodyAO1)
	if errUpdateProfileOKBodyAO1 != nil {
		return nil, errUpdateProfileOKBodyAO1
	}
	_parts = append(_parts, jsonDataUpdateProfileOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this update profile o k body
func (o *UpdateProfileOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ProfileEntity
	if err := o.ProfileEntity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateProfileOKBody) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(o.User) { // not required
		return nil
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateProfileOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateProfileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateProfileOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateProfileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
