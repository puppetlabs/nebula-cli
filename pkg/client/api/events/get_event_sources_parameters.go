// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetEventSourcesParams creates a new GetEventSourcesParams object
// with the default values initialized.
func NewGetEventSourcesParams() *GetEventSourcesParams {
	var ()
	return &GetEventSourcesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetEventSourcesParamsWithTimeout creates a new GetEventSourcesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetEventSourcesParamsWithTimeout(timeout time.Duration) *GetEventSourcesParams {
	var ()
	return &GetEventSourcesParams{

		timeout: timeout,
	}
}

// NewGetEventSourcesParamsWithContext creates a new GetEventSourcesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetEventSourcesParamsWithContext(ctx context.Context) *GetEventSourcesParams {
	var ()
	return &GetEventSourcesParams{

		Context: ctx,
	}
}

// NewGetEventSourcesParamsWithHTTPClient creates a new GetEventSourcesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetEventSourcesParamsWithHTTPClient(client *http.Client) *GetEventSourcesParams {
	var ()
	return &GetEventSourcesParams{
		HTTPClient: client,
	}
}

/*GetEventSourcesParams contains all the parameters to send to the API endpoint
for the get event sources operation typically these are written to a http.Request
*/
type GetEventSourcesParams struct {

	/*EventType
	  Restricts the response to only event sources of the given event type

	*/
	EventType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get event sources params
func (o *GetEventSourcesParams) WithTimeout(timeout time.Duration) *GetEventSourcesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get event sources params
func (o *GetEventSourcesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get event sources params
func (o *GetEventSourcesParams) WithContext(ctx context.Context) *GetEventSourcesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get event sources params
func (o *GetEventSourcesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get event sources params
func (o *GetEventSourcesParams) WithHTTPClient(client *http.Client) *GetEventSourcesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get event sources params
func (o *GetEventSourcesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEventType adds the eventType to the get event sources params
func (o *GetEventSourcesParams) WithEventType(eventType *string) *GetEventSourcesParams {
	o.SetEventType(eventType)
	return o
}

// SetEventType adds the eventType to the get event sources params
func (o *GetEventSourcesParams) SetEventType(eventType *string) {
	o.EventType = eventType
}

// WriteToRequest writes these params to a swagger request
func (o *GetEventSourcesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EventType != nil {

		// query param event-type
		var qrEventType string
		if o.EventType != nil {
			qrEventType = *o.EventType
		}
		qEventType := qrEventType
		if qEventType != "" {
			if err := r.SetQueryParam("event-type", qEventType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
