// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// GetEventSourcesReader is a Reader for the GetEventSources structure.
type GetEventSourcesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEventSourcesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEventSourcesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetEventSourcesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetEventSourcesOK creates a GetEventSourcesOK with default headers values
func NewGetEventSourcesOK() *GetEventSourcesOK {
	return &GetEventSourcesOK{}
}

/*GetEventSourcesOK handles this case with default header values.

The list of event sources
*/
type GetEventSourcesOK struct {
	Payload *GetEventSourcesOKBody
}

func (o *GetEventSourcesOK) Error() string {
	return fmt.Sprintf("[GET /api/event-sources][%d] getEventSourcesOK  %+v", 200, o.Payload)
}

func (o *GetEventSourcesOK) GetPayload() *GetEventSourcesOKBody {
	return o.Payload
}

func (o *GetEventSourcesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetEventSourcesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventSourcesDefault creates a GetEventSourcesDefault with default headers values
func NewGetEventSourcesDefault(code int) *GetEventSourcesDefault {
	return &GetEventSourcesDefault{
		_statusCode: code,
	}
}

/*GetEventSourcesDefault handles this case with default header values.

An error occurred
*/
type GetEventSourcesDefault struct {
	_statusCode int

	Payload *GetEventSourcesDefaultBody
}

// Code gets the status code for the get event sources default response
func (o *GetEventSourcesDefault) Code() int {
	return o._statusCode
}

func (o *GetEventSourcesDefault) Error() string {
	return fmt.Sprintf("[GET /api/event-sources][%d] getEventSources default  %+v", o._statusCode, o.Payload)
}

func (o *GetEventSourcesDefault) GetPayload() *GetEventSourcesDefaultBody {
	return o.Payload
}

func (o *GetEventSourcesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetEventSourcesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetEventSourcesDefaultBody Error response
swagger:model GetEventSourcesDefaultBody
*/
type GetEventSourcesDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this get event sources default body
func (o *GetEventSourcesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEventSourcesDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getEventSources default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetEventSourcesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEventSourcesDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetEventSourcesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetEventSourcesOKBody The response type for all event sources
swagger:model GetEventSourcesOKBody
*/
type GetEventSourcesOKBody struct {

	// A list of event sources
	EventSources []*models.EventSource `json:"event_sources"`
}

// Validate validates this get event sources o k body
func (o *GetEventSourcesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEventSources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEventSourcesOKBody) validateEventSources(formats strfmt.Registry) error {

	if swag.IsZero(o.EventSources) { // not required
		return nil
	}

	for i := 0; i < len(o.EventSources); i++ {
		if swag.IsZero(o.EventSources[i]) { // not required
			continue
		}

		if o.EventSources[i] != nil {
			if err := o.EventSources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getEventSourcesOK" + "." + "event_sources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetEventSourcesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEventSourcesOKBody) UnmarshalBinary(b []byte) error {
	var res GetEventSourcesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
