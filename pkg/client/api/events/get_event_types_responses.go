// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// GetEventTypesReader is a Reader for the GetEventTypes structure.
type GetEventTypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEventTypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEventTypesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetEventTypesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetEventTypesOK creates a GetEventTypesOK with default headers values
func NewGetEventTypesOK() *GetEventTypesOK {
	return &GetEventTypesOK{}
}

/*GetEventTypesOK handles this case with default header values.

The list of event types
*/
type GetEventTypesOK struct {
	Payload *GetEventTypesOKBody
}

func (o *GetEventTypesOK) Error() string {
	return fmt.Sprintf("[GET /api/event-types][%d] getEventTypesOK  %+v", 200, o.Payload)
}

func (o *GetEventTypesOK) GetPayload() *GetEventTypesOKBody {
	return o.Payload
}

func (o *GetEventTypesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetEventTypesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventTypesDefault creates a GetEventTypesDefault with default headers values
func NewGetEventTypesDefault(code int) *GetEventTypesDefault {
	return &GetEventTypesDefault{
		_statusCode: code,
	}
}

/*GetEventTypesDefault handles this case with default header values.

An error occurred
*/
type GetEventTypesDefault struct {
	_statusCode int

	Payload *GetEventTypesDefaultBody
}

// Code gets the status code for the get event types default response
func (o *GetEventTypesDefault) Code() int {
	return o._statusCode
}

func (o *GetEventTypesDefault) Error() string {
	return fmt.Sprintf("[GET /api/event-types][%d] getEventTypes default  %+v", o._statusCode, o.Payload)
}

func (o *GetEventTypesDefault) GetPayload() *GetEventTypesDefaultBody {
	return o.Payload
}

func (o *GetEventTypesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetEventTypesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetEventTypesDefaultBody Error response
swagger:model GetEventTypesDefaultBody
*/
type GetEventTypesDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this get event types default body
func (o *GetEventTypesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEventTypesDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getEventTypes default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetEventTypesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEventTypesDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetEventTypesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetEventTypesOKBody The response type for all event types
swagger:model GetEventTypesOKBody
*/
type GetEventTypesOKBody struct {

	// A list of event types
	EventTypes []*models.EventType `json:"event_types"`
}

// Validate validates this get event types o k body
func (o *GetEventTypesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEventTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEventTypesOKBody) validateEventTypes(formats strfmt.Registry) error {

	if swag.IsZero(o.EventTypes) { // not required
		return nil
	}

	for i := 0; i < len(o.EventTypes); i++ {
		if swag.IsZero(o.EventTypes[i]) { // not required
			continue
		}

		if o.EventTypes[i] != nil {
			if err := o.EventTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getEventTypesOK" + "." + "event_types" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetEventTypesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEventTypesOKBody) UnmarshalBinary(b []byte) error {
	var res GetEventTypesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
