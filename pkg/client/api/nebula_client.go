// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/puppetlabs/nebula/pkg/client/api/auth_v1"
	"github.com/puppetlabs/nebula/pkg/client/api/integrations_v1"
	"github.com/puppetlabs/nebula/pkg/client/api/priv"
	"github.com/puppetlabs/nebula/pkg/client/api/workflow_runs_v1"
	"github.com/puppetlabs/nebula/pkg/client/api/workflow_secrets_v1"
	"github.com/puppetlabs/nebula/pkg/client/api/workflows_v1"
)

// Default nebula HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new nebula HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Nebula {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new nebula HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Nebula {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new nebula client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Nebula {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Nebula)
	cli.Transport = transport

	cli.AuthV1 = auth_v1.New(transport, formats)

	cli.IntegrationsV1 = integrations_v1.New(transport, formats)

	cli.Priv = priv.New(transport, formats)

	cli.WorkflowRunsV1 = workflow_runs_v1.New(transport, formats)

	cli.WorkflowSecretsV1 = workflow_secrets_v1.New(transport, formats)

	cli.WorkflowsV1 = workflows_v1.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Nebula is a client for nebula
type Nebula struct {
	AuthV1 *auth_v1.Client

	IntegrationsV1 *integrations_v1.Client

	Priv *priv.Client

	WorkflowRunsV1 *workflow_runs_v1.Client

	WorkflowSecretsV1 *workflow_secrets_v1.Client

	WorkflowsV1 *workflows_v1.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Nebula) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.AuthV1.SetTransport(transport)

	c.IntegrationsV1.SetTransport(transport)

	c.Priv.SetTransport(transport)

	c.WorkflowRunsV1.SetTransport(transport)

	c.WorkflowSecretsV1.SetTransport(transport)

	c.WorkflowsV1.SetTransport(transport)

}
