// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetIntegrationRepositoryBranchesParams creates a new GetIntegrationRepositoryBranchesParams object
// with the default values initialized.
func NewGetIntegrationRepositoryBranchesParams() *GetIntegrationRepositoryBranchesParams {
	var ()
	return &GetIntegrationRepositoryBranchesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIntegrationRepositoryBranchesParamsWithTimeout creates a new GetIntegrationRepositoryBranchesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIntegrationRepositoryBranchesParamsWithTimeout(timeout time.Duration) *GetIntegrationRepositoryBranchesParams {
	var ()
	return &GetIntegrationRepositoryBranchesParams{

		timeout: timeout,
	}
}

// NewGetIntegrationRepositoryBranchesParamsWithContext creates a new GetIntegrationRepositoryBranchesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIntegrationRepositoryBranchesParamsWithContext(ctx context.Context) *GetIntegrationRepositoryBranchesParams {
	var ()
	return &GetIntegrationRepositoryBranchesParams{

		Context: ctx,
	}
}

// NewGetIntegrationRepositoryBranchesParamsWithHTTPClient creates a new GetIntegrationRepositoryBranchesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIntegrationRepositoryBranchesParamsWithHTTPClient(client *http.Client) *GetIntegrationRepositoryBranchesParams {
	var ()
	return &GetIntegrationRepositoryBranchesParams{
		HTTPClient: client,
	}
}

/*GetIntegrationRepositoryBranchesParams contains all the parameters to send to the API endpoint
for the get integration repository branches operation typically these are written to a http.Request
*/
type GetIntegrationRepositoryBranchesParams struct {

	/*IntegrationID
	  The integration ID to reference

	*/
	IntegrationID string
	/*IntegrationRepositoryName
	  The repository name to reference

	*/
	IntegrationRepositoryName string
	/*IntegrationRepositoryOwner
	  The repository owner to reference

	*/
	IntegrationRepositoryOwner string
	/*Q
	  A search term for filtering the results of a branch listing

	*/
	Q *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get integration repository branches params
func (o *GetIntegrationRepositoryBranchesParams) WithTimeout(timeout time.Duration) *GetIntegrationRepositoryBranchesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get integration repository branches params
func (o *GetIntegrationRepositoryBranchesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get integration repository branches params
func (o *GetIntegrationRepositoryBranchesParams) WithContext(ctx context.Context) *GetIntegrationRepositoryBranchesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get integration repository branches params
func (o *GetIntegrationRepositoryBranchesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get integration repository branches params
func (o *GetIntegrationRepositoryBranchesParams) WithHTTPClient(client *http.Client) *GetIntegrationRepositoryBranchesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get integration repository branches params
func (o *GetIntegrationRepositoryBranchesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIntegrationID adds the integrationID to the get integration repository branches params
func (o *GetIntegrationRepositoryBranchesParams) WithIntegrationID(integrationID string) *GetIntegrationRepositoryBranchesParams {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the get integration repository branches params
func (o *GetIntegrationRepositoryBranchesParams) SetIntegrationID(integrationID string) {
	o.IntegrationID = integrationID
}

// WithIntegrationRepositoryName adds the integrationRepositoryName to the get integration repository branches params
func (o *GetIntegrationRepositoryBranchesParams) WithIntegrationRepositoryName(integrationRepositoryName string) *GetIntegrationRepositoryBranchesParams {
	o.SetIntegrationRepositoryName(integrationRepositoryName)
	return o
}

// SetIntegrationRepositoryName adds the integrationRepositoryName to the get integration repository branches params
func (o *GetIntegrationRepositoryBranchesParams) SetIntegrationRepositoryName(integrationRepositoryName string) {
	o.IntegrationRepositoryName = integrationRepositoryName
}

// WithIntegrationRepositoryOwner adds the integrationRepositoryOwner to the get integration repository branches params
func (o *GetIntegrationRepositoryBranchesParams) WithIntegrationRepositoryOwner(integrationRepositoryOwner string) *GetIntegrationRepositoryBranchesParams {
	o.SetIntegrationRepositoryOwner(integrationRepositoryOwner)
	return o
}

// SetIntegrationRepositoryOwner adds the integrationRepositoryOwner to the get integration repository branches params
func (o *GetIntegrationRepositoryBranchesParams) SetIntegrationRepositoryOwner(integrationRepositoryOwner string) {
	o.IntegrationRepositoryOwner = integrationRepositoryOwner
}

// WithQ adds the q to the get integration repository branches params
func (o *GetIntegrationRepositoryBranchesParams) WithQ(q *string) *GetIntegrationRepositoryBranchesParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get integration repository branches params
func (o *GetIntegrationRepositoryBranchesParams) SetQ(q *string) {
	o.Q = q
}

// WriteToRequest writes these params to a swagger request
func (o *GetIntegrationRepositoryBranchesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param integrationId
	if err := r.SetPathParam("integrationId", o.IntegrationID); err != nil {
		return err
	}

	// path param integrationRepositoryName
	if err := r.SetPathParam("integrationRepositoryName", o.IntegrationRepositoryName); err != nil {
		return err
	}

	// path param integrationRepositoryOwner
	if err := r.SetPathParam("integrationRepositoryOwner", o.IntegrationRepositoryOwner); err != nil {
		return err
	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
