// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new integrations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for integrations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateIntegration creates an integration in your account
*/
func (a *Client) CreateIntegration(params *CreateIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateIntegrationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createIntegration",
		Method:             "POST",
		PathPattern:        "/api/integrations",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIntegrationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateIntegrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteIntegration deletes an integration
*/
func (a *Client) DeleteIntegration(params *DeleteIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIntegration",
		Method:             "DELETE",
		PathPattern:        "/api/integrations/{integrationId}",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteIntegrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIntegration gets an integration
*/
func (a *Client) GetIntegration(params *GetIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegration",
		Method:             "GET",
		PathPattern:        "/api/integrations/{integrationId}",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIntegrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIntegrationRepositories gets a list of available repositories for a given integration and owner
*/
func (a *Client) GetIntegrationRepositories(params *GetIntegrationRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntegrationRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationRepositoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationRepositories",
		Method:             "GET",
		PathPattern:        "/api/integrations/{integrationId}/repositories/{integrationRepositoryOwner}",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIntegrationRepositoriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIntegrationRepositoryBranches gets a list of available branches for a given integration owner and repository
*/
func (a *Client) GetIntegrationRepositoryBranches(params *GetIntegrationRepositoryBranchesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntegrationRepositoryBranchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationRepositoryBranchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationRepositoryBranches",
		Method:             "GET",
		PathPattern:        "/api/integrations/{integrationId}/repositories/{integrationRepositoryOwner}/{integrationRepositoryName}/branches",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationRepositoryBranchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationRepositoryBranchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIntegrationRepositoryBranchesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIntegrationRepositoryFiles gets a list of files in a directory for a given integration owner repository branch and path
*/
func (a *Client) GetIntegrationRepositoryFiles(params *GetIntegrationRepositoryFilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntegrationRepositoryFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationRepositoryFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationRepositoryFiles",
		Method:             "GET",
		PathPattern:        "/api/integrations/{integrationId}/repositories/{integrationRepositoryOwner}/{integrationRepositoryName}/branches/{integrationRepositoryBranch}/files",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationRepositoryFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationRepositoryFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIntegrationRepositoryFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetIntegrations lists all account integrations
*/
func (a *Client) GetIntegrations(params *GetIntegrationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrations",
		Method:             "GET",
		PathPattern:        "/api/integrations",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetIntegrationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReauthorizeIntegration reauthorizes an external integration
*/
func (a *Client) ReauthorizeIntegration(params *ReauthorizeIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*ReauthorizeIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReauthorizeIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reauthorizeIntegration",
		Method:             "POST",
		PathPattern:        "/api/integrations/{integrationId}/reauthorize",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReauthorizeIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReauthorizeIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReauthorizeIntegrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateIntegration updates an integration
*/
func (a *Client) UpdateIntegration(params *UpdateIntegrationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateIntegration",
		Method:             "PUT",
		PathPattern:        "/api/integrations/{integrationId}",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateIntegrationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
